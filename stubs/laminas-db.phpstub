<?php
/**
 * @noinspection GrazieInspection
 * @noinspection HttpUrlsUsage
 * @noinspection PhpDeprecationInspection
 * @noinspection PhpDocRedundantThrowsInspection
 * @noinspection PhpDocSignatureInspection
 * @noinspection PhpDocSignatureIsNotCompleteInspection
 * @noinspection PhpFullyQualifiedNameUsageInspection
 * @noinspection PhpInconsistentReturnPointsInspection
 * @noinspection PhpMissingFieldTypeInspection
 * @noinspection PhpMissingParamTypeInspection
 * @noinspection PhpMissingParentConstructorInspection
 * @noinspection PhpMissingReturnTypeInspection
 * @noinspection PhpMixedReturnTypeCanBeReducedInspection
 * @noinspection PhpMultipleClassDeclarationsInspection
 * @noinspection PhpParameterNameChangedDuringInheritanceInspection
 * @noinspection PhpPluralMixedCanBeReplacedWithArrayInspection
 * @noinspection PhpPropertyOnlyWrittenInspection
 * @noinspection PhpReturnDocTypeMismatchInspection
 * @noinspection PhpUnnecessaryFullyQualifiedNameInspection
 * @noinspection PhpUnused
 * @noinspection PhpVarTagWithoutVariableNameInspection
 */

namespace Laminas\Db\Metadata {
    interface MetadataInterface
    {
        /**
         * Get schemas.
         *
         * @return string[]
         */
        public function getSchemas();

        /**
         * Get table names.
         *
         * @param null|string $schema
         * @param bool        $includeViews
         *
         * @return string[]
         */
        public function getTableNames($schema = null, $includeViews = false);

        /**
         * Get tables.
         *
         * @param null|string $schema
         * @param bool        $includeViews
         *
         * @return Object\TableObject[]
         */
        public function getTables($schema = null, $includeViews = false);

        /**
         * Get table
         *
         * @param string      $tableName
         * @param null|string $schema
         *
         * @return Object\TableObject
         */
        public function getTable($tableName, $schema = null);

        /**
         * Get view names
         *
         * @param null|string $schema
         *
         * @return string[]
         */
        public function getViewNames($schema = null);

        /**
         * Get views
         *
         * @param null|string $schema
         *
         * @return Object\ViewObject[]
         */
        public function getViews($schema = null);

        /**
         * Get view
         *
         * @param string      $viewName
         * @param null|string $schema
         *
         * @return Object\ViewObject
         */
        public function getView($viewName, $schema = null);

        /**
         * Get column names
         *
         * @param string      $table
         * @param null|string $schema
         *
         * @return string[]
         */
        public function getColumnNames($table, $schema = null);

        /**
         * Get columns
         *
         * @param string      $table
         * @param null|string $schema
         *
         * @return Object\ColumnObject[]
         */
        public function getColumns($table, $schema = null);

        /**
         * Get column
         *
         * @param string      $columnName
         * @param string      $table
         * @param null|string $schema
         *
         * @return Object\ColumnObject
         */
        public function getColumn($columnName, $table, $schema = null);

        /**
         * Get constraints
         *
         * @param string      $table
         * @param null|string $schema
         *
         * @return Object\ConstraintObject[]
         */
        public function getConstraints($table, $schema = null);

        /**
         * Get constraint
         *
         * @param string      $constraintName
         * @param string      $table
         * @param null|string $schema
         *
         * @return Object\ConstraintObject
         */
        public function getConstraint($constraintName, $table, $schema = null);

        /**
         * Get constraint keys
         *
         * @param string      $constraint
         * @param string      $table
         * @param null|string $schema
         *
         * @return Object\ConstraintKeyObject[]
         */
        public function getConstraintKeys($constraint, $table, $schema = null);

        /**
         * Get trigger names
         *
         * @param null|string $schema
         *
         * @return string[]
         */
        public function getTriggerNames($schema = null);

        /**
         * Get triggers
         *
         * @param null|string $schema
         *
         * @return Object\TriggerObject[]
         */
        public function getTriggers($schema = null);

        /**
         * Get trigger
         *
         * @param string      $triggerName
         * @param null|string $schema
         *
         * @return Object\TriggerObject
         */
        public function getTrigger($triggerName, $schema = null);
    }

    /**
     * @deprecated Use Laminas\Db\Metadata\Source\Factory::createSourceFromAdapter($adapter)
     */
    class Metadata implements \Laminas\Db\Metadata\MetadataInterface
    {
        /** @var MetadataInterface */
        protected $source;

        /**
         * Constructor
         */
        public function __construct(\Laminas\Db\Adapter\Adapter $adapter) {}

        /**
         * {@inheritdoc}
         */
        public function getTables($schema = null, $includeViews = false) {}

        /**
         * {@inheritdoc}
         */
        public function getViews($schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getTriggers($schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getConstraints($table, $schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getColumns($table, $schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getConstraintKeys($constraint, $table, $schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getConstraint($constraintName, $table, $schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getSchemas() {}

        /**
         * {@inheritdoc}
         */
        public function getTableNames($schema = null, $includeViews = false) {}

        /**
         * {@inheritdoc}
         */
        public function getTable($tableName, $schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getViewNames($schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getView($viewName, $schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getTriggerNames($schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getTrigger($triggerName, $schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getColumnNames($table, $schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getColumn($columnName, $table, $schema = null) {}
    }
}

namespace Laminas\Db\Metadata\Source {
    abstract class AbstractSource implements \Laminas\Db\Metadata\MetadataInterface
    {
        public const DEFAULT_SCHEMA = '__DEFAULT_SCHEMA__';
        /** @var \Laminas\Db\Adapter\Adapter */
        protected $adapter;
        /** @var string */
        protected $defaultSchema;
        /** @var array */
        protected $data = [];

        /**
         * Constructor
         */
        public function __construct(\Laminas\Db\Adapter\Adapter $adapter) {}

        /**
         * Get schemas
         *
         * @return string[]
         */
        public function getSchemas() {}

        /**
         * {@inheritdoc}
         */
        public function getTableNames($schema = null, $includeViews = false) {}

        /**
         * {@inheritdoc}
         */
        public function getTables($schema = null, $includeViews = false) {}

        /**
         * {@inheritdoc}
         */
        public function getTable($tableName, $schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getViewNames($schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getViews($schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getView($viewName, $schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getColumnNames($table, $schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getColumns($table, $schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getColumn($columnName, $table, $schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getConstraints($table, $schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getConstraint($constraintName, $table, $schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getConstraintKeys($constraint, $table, $schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getTriggerNames($schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getTriggers($schema = null) {}

        /**
         * {@inheritdoc}
         */
        public function getTrigger($triggerName, $schema = null) {}

        /**
         * Prepare data hierarchy
         *
         * @param string $type
         *
         * @return void
         */
        protected function prepareDataHierarchy($type) {}

        /**
         * Load schema data
         */
        protected function loadSchemaData() {}

        /**
         * Load table name data
         *
         * @param string $schema
         */
        protected function loadTableNameData($schema) {}

        /**
         * Load column data
         *
         * @param string $table
         * @param string $schema
         */
        protected function loadColumnData($table, $schema) {}

        /**
         * Load constraint data
         *
         * @param string $table
         * @param string $schema
         */
        protected function loadConstraintData($table, $schema) {}

        /**
         * Load constraint data keys
         *
         * @param string $schema
         */
        protected function loadConstraintDataKeys($schema) {}

        /**
         * Load constraint references
         *
         * @param string $table
         * @param string $schema
         */
        protected function loadConstraintReferences($table, $schema) {}

        /**
         * Load trigger data
         *
         * @param string $schema
         */
        protected function loadTriggerData($schema) {}
    }

    /**
     * Metadata source for Oracle
     */
    class OracleMetadata extends \Laminas\Db\Metadata\Source\AbstractSource
    {
        /** @var array */
        protected $constraintTypeMap = ['C' => 'CHECK', 'P' => 'PRIMARY KEY', 'R' => 'FOREIGN_KEY'];

        /**
         * {@inheritdoc}
         *
         * @see \Laminas\Db\Metadata\Source\AbstractSource::loadColumnData()
         */
        protected function loadColumnData($table, $schema) {}

        /**
         * Constraint type
         *
         * @param string $type
         *
         * @return string
         */
        protected function getConstraintType($type) {}

        /**
         * {@inheritdoc}
         *
         * @see \Laminas\Db\Metadata\Source\AbstractSource::loadConstraintData()
         */
        protected function loadConstraintData($table, $schema) {}

        /**
         * {@inheritdoc}
         *
         * @see \Laminas\Db\Metadata\Source\AbstractSource::loadSchemaData()
         */
        protected function loadSchemaData() {}

        /**
         * {@inheritdoc}
         *
         * @see \Laminas\Db\Metadata\Source\AbstractSource::loadTableNameData()
         */
        protected function loadTableNameData($schema) {}

        /**
         * FIXME: load trigger data
         *
         * {@inheritdoc}
         *
         * @see \Laminas\Db\Metadata\Source\AbstractSource::loadTriggerData()
         */
        protected function loadTriggerData($schema) {}
    }

    class SqliteMetadata extends \Laminas\Db\Metadata\Source\AbstractSource
    {
        protected function loadSchemaData() {}

        /**
         * @param string $schema
         *
         * @return void
         */
        protected function loadTableNameData($schema) {}

        /**
         * @param string $table
         * @param string $schema
         *
         * @return void
         */
        protected function loadColumnData($table, $schema) {}

        /**
         * @param string $table
         * @param string $schema
         *
         * @return void
         */
        protected function loadConstraintData($table, $schema) {}

        /**
         * @param string $schema
         *
         * @return null|array<string, string>
         */
        protected function loadTriggerData($schema) {}

        /**
         * @param string      $name
         * @param null|scalar $value
         * @param string      $schema
         *
         * @return array
         */
        protected function fetchPragma($name, $value = null, $schema = null) {}

        /**
         * @param string $sql
         *
         * @return null|array<string, mixed>
         */
        protected function parseView($sql) {}

        /**
         * @param string $sql
         *
         * @return null|array<string, mixed>
         */
        protected function parseTrigger($sql) {}

        /** @return string */
        protected function buildRegularExpression(array $re) {}

        /** @return string */
        protected function getIdentifierRegularExpression() {}

        /** @return string */
        protected function getIdentifierChainRegularExpression() {}

        /** @return string */
        protected function getIdentifierListRegularExpression() {}
    }

    /**
     * Source metadata factory.
     */
    class Factory
    {
        /**
         * Create source from adapter
         *
         * @return \Laminas\Db\Metadata\MetadataInterface
         * @throws \Laminas\Db\Exception\InvalidArgumentException If adapter platform name not recognized.
         */
        public static function createSourceFromAdapter(\Laminas\Db\Adapter\Adapter $adapter) {}
    }

    class MysqlMetadata extends \Laminas\Db\Metadata\Source\AbstractSource
    {
        protected function loadSchemaData() {}

        /**
         * @param string $schema
         *
         * @return void
         */
        protected function loadTableNameData($schema) {}

        /**
         * @param string $table
         * @param string $schema
         *
         * @return void
         */
        protected function loadColumnData($table, $schema) {}

        /**
         * @param string $table
         * @param string $schema
         *
         * @return void
         */
        protected function loadConstraintData($table, $schema) {}

        /**
         * @param string $schema
         *
         * @return void
         */
        protected function loadConstraintDataNames($schema) {}

        /**
         * @param string $schema
         *
         * @return void
         */
        protected function loadConstraintDataKeys($schema) {}

        /**
         * @param string $table
         * @param string $schema
         *
         * @return void
         */
        protected function loadConstraintReferences($table, $schema) {}

        /**
         * @param string $schema
         *
         * @return void
         */
        protected function loadTriggerData($schema) {}
    }

    class PostgresqlMetadata extends \Laminas\Db\Metadata\Source\AbstractSource
    {
        protected function loadSchemaData() {}

        /**
         * @param string $schema
         *
         * @return void
         */
        protected function loadTableNameData($schema) {}

        /**
         * @param string $table
         * @param string $schema
         *
         * @return void
         */
        protected function loadColumnData($table, $schema) {}

        /**
         * @param string $table
         * @param string $schema
         *
         * @return void
         */
        protected function loadConstraintData($table, $schema) {}

        /**
         * @param string $schema
         *
         * @return void
         */
        protected function loadTriggerData($schema) {}
    }

    class SqlServerMetadata extends \Laminas\Db\Metadata\Source\AbstractSource
    {
        protected function loadSchemaData() {}

        /**
         * @param string $schema
         *
         * @return void
         */
        protected function loadTableNameData($schema) {}

        /**
         * @param string $table
         * @param string $schema
         *
         * @return string
         */
        protected function loadColumnData($table, $schema) {}

        /**
         * @param string $table
         * @param string $schema
         *
         * @return void
         */
        protected function loadConstraintData($table, $schema) {}

        /**
         * @param string $schema
         *
         * @return void
         */
        protected function loadTriggerData($schema) {}
    }
}

namespace Laminas\Db\Metadata\Object {
    abstract class AbstractTableObject
    {
        /*
        protected $catalogName = null;
        protected $schemaName = null;
        */
        /** @var string */
        protected $name;
        /** @var string */
        protected $type;
        /** @var array */
        protected $columns;
        /** @var array */
        protected $constraints;

        /**
         * Constructor
         *
         * @param string $name
         */
        public function __construct($name) {}

        /**
         * Set columns
         *
         * @param array $columns
         */
        public function setColumns(array $columns) {}

        /**
         * Get columns
         *
         * @return array
         */
        public function getColumns() {}

        /**
         * Set constraints
         *
         * @param array $constraints
         */
        public function setConstraints($constraints) {}

        /**
         * Get constraints
         *
         * @return array
         */
        public function getConstraints() {}

        /**
         * Set name
         *
         * @param string $name
         */
        public function setName($name) {}

        /**
         * Get name
         *
         * @return string
         */
        public function getName() {}
    }

    class TableObject extends \Laminas\Db\Metadata\Object\AbstractTableObject
    {
    }

    class ViewObject extends \Laminas\Db\Metadata\Object\AbstractTableObject
    {
        /** @var null|string */
        protected $viewDefinition;
        /** @var null|string */
        protected $checkOption;
        /** @var null|bool */
        protected $isUpdatable;

        /**
         * @return string $viewDefinition
         */
        public function getViewDefinition() {}

        /**
         * @param string $viewDefinition to set
         *
         * @return $this Provides a fluent interface
         */
        public function setViewDefinition($viewDefinition) {}

        /**
         * @return string $checkOption
         */
        public function getCheckOption() {}

        /**
         * @param string $checkOption to set
         *
         * @return $this Provides a fluent interface
         */
        public function setCheckOption($checkOption) {}

        /**
         * @return bool $isUpdatable
         */
        public function getIsUpdatable() {}

        /**
         * @param bool $isUpdatable to set
         *
         * @return $this Provides a fluent interface
         */
        public function setIsUpdatable($isUpdatable) {}

        /** @return bool */
        public function isUpdatable() {}
    }

    class ConstraintObject
    {
        /** @var string */
        protected $name;
        /** @var string */
        protected $tableName;
        /** @var string */
        protected $schemaName;
        /**
         * One of "PRIMARY KEY", "UNIQUE", "FOREIGN KEY", or "CHECK"
         *
         * @var string
         */
        protected $type;
        /** @var string[] */
        protected $columns = [];
        /** @var string */
        protected $referencedTableSchema;
        /** @var string */
        protected $referencedTableName;
        /** @var string[] */
        protected $referencedColumns;
        /** @var string */
        protected $matchOption;
        /** @var string */
        protected $updateRule;
        /** @var string */
        protected $deleteRule;
        /** @var string */
        protected $checkClause;

        /**
         * Constructor
         *
         * @param string $name
         * @param string $tableName
         * @param string $schemaName
         */
        public function __construct($name, $tableName, $schemaName = null) {}

        /**
         * Set name
         *
         * @param string $name
         */
        public function setName($name) {}

        /**
         * Get name
         *
         * @return string
         */
        public function getName() {}

        /**
         * Set schema name
         *
         * @param string $schemaName
         */
        public function setSchemaName($schemaName) {}

        /**
         * Get schema name
         *
         * @return string
         */
        public function getSchemaName() {}

        /**
         * Get table name
         *
         * @return string
         */
        public function getTableName() {}

        /**
         * Set table name
         *
         * @param string $tableName
         *
         * @return $this Provides a fluent interface
         */
        public function setTableName($tableName) {}

        /**
         * Set type
         *
         * @param string $type
         */
        public function setType($type) {}

        /**
         * Get type
         *
         * @return string
         */
        public function getType() {}

        /** @return bool */
        public function hasColumns() {}

        /**
         * Get Columns.
         *
         * @return string[]
         */
        public function getColumns() {}

        /**
         * Set Columns.
         *
         * @param string[] $columns
         *
         * @return $this Provides a fluent interface
         */
        public function setColumns(array $columns) {}

        /**
         * Get Referenced Table Schema.
         *
         * @return string
         */
        public function getReferencedTableSchema() {}

        /**
         * Set Referenced Table Schema.
         *
         * @param string $referencedTableSchema
         *
         * @return $this Provides a fluent interface
         */
        public function setReferencedTableSchema($referencedTableSchema) {}

        /**
         * Get Referenced Table Name.
         *
         * @return string
         */
        public function getReferencedTableName() {}

        /**
         * Set Referenced Table Name.
         *
         * @param string $referencedTableName
         *
         * @return $this Provides a fluent interface
         */
        public function setReferencedTableName($referencedTableName) {}

        /**
         * Get Referenced Columns.
         *
         * @return string[]
         */
        public function getReferencedColumns() {}

        /**
         * Set Referenced Columns.
         *
         * @param string[] $referencedColumns
         *
         * @return $this Provides a fluent interface
         */
        public function setReferencedColumns(array $referencedColumns) {}

        /**
         * Get Match Option.
         *
         * @return string
         */
        public function getMatchOption() {}

        /**
         * Set Match Option.
         *
         * @param string $matchOption
         *
         * @return $this Provides a fluent interface
         */
        public function setMatchOption($matchOption) {}

        /**
         * Get Update Rule.
         *
         * @return string
         */
        public function getUpdateRule() {}

        /**
         * Set Update Rule.
         *
         * @param string $updateRule
         *
         * @return $this Provides a fluent interface
         */
        public function setUpdateRule($updateRule) {}

        /**
         * Get Delete Rule.
         *
         * @return string
         */
        public function getDeleteRule() {}

        /**
         * Set Delete Rule.
         *
         * @param string $deleteRule
         *
         * @return $this Provides a fluent interface
         */
        public function setDeleteRule($deleteRule) {}

        /**
         * Get Check Clause.
         *
         * @return string
         */
        public function getCheckClause() {}

        /**
         * Set Check Clause.
         *
         * @param string $checkClause
         *
         * @return $this Provides a fluent interface
         */
        public function setCheckClause($checkClause) {}

        /**
         * Is primary key
         *
         * @return bool
         */
        public function isPrimaryKey() {}

        /**
         * Is unique key
         *
         * @return bool
         */
        public function isUnique() {}

        /**
         * Is foreign key
         *
         * @return bool
         */
        public function isForeignKey() {}

        /**
         * Is foreign key
         *
         * @return bool
         */
        public function isCheck() {}
    }

    class ConstraintKeyObject
    {
        public const FK_CASCADE     = 'CASCADE';
        public const FK_SET_NULL    = 'SET NULL';
        public const FK_NO_ACTION   = 'NO ACTION';
        public const FK_RESTRICT    = 'RESTRICT';
        public const FK_SET_DEFAULT = 'SET DEFAULT';
        /** @var string */
        protected $columnName;
        /** @var int */
        protected $ordinalPosition;
        /** @var bool */
        protected $positionInUniqueConstraint;
        /** @var string */
        protected $referencedTableSchema;
        /** @var string */
        protected $referencedTableName;
        /** @var string */
        protected $referencedColumnName;
        /** @var string */
        protected $foreignKeyUpdateRule;
        /** @var string */
        protected $foreignKeyDeleteRule;

        /**
         * Constructor
         *
         * @param string $column
         */
        public function __construct($column) {}

        /**
         * Get column name
         *
         * @return string
         */
        public function getColumnName() {}

        /**
         * Set column name
         *
         * @param string $columnName
         *
         * @return $this Provides a fluent interface
         */
        public function setColumnName($columnName) {}

        /**
         * Get ordinal position
         *
         * @return int
         */
        public function getOrdinalPosition() {}

        /**
         * Set ordinal position
         *
         * @param int $ordinalPosition
         *
         * @return $this Provides a fluent interface
         */
        public function setOrdinalPosition($ordinalPosition) {}

        /**
         * Get position in unique constraint
         *
         * @return bool
         */
        public function getPositionInUniqueConstraint() {}

        /**
         * Set position in unique constraint
         *
         * @param bool $positionInUniqueConstraint
         *
         * @return $this Provides a fluent interface
         */
        public function setPositionInUniqueConstraint($positionInUniqueConstraint) {}

        /**
         * Get referencred table schema
         *
         * @return string
         */
        public function getReferencedTableSchema() {}

        /**
         * Set referenced table schema
         *
         * @param string $referencedTableSchema
         *
         * @return $this Provides a fluent interface
         */
        public function setReferencedTableSchema($referencedTableSchema) {}

        /**
         * Get referenced table name
         *
         * @return string
         */
        public function getReferencedTableName() {}

        /**
         * Set Referenced table name
         *
         * @param string $referencedTableName
         *
         * @return $this Provides a fluent interface
         */
        public function setReferencedTableName($referencedTableName) {}

        /**
         * Get referenced column name
         *
         * @return string
         */
        public function getReferencedColumnName() {}

        /**
         * Set referenced column name
         *
         * @param string $referencedColumnName
         *
         * @return $this Provides a fluent interface
         */
        public function setReferencedColumnName($referencedColumnName) {}

        /**
         * set foreign key update rule
         *
         * @param string $foreignKeyUpdateRule
         */
        public function setForeignKeyUpdateRule($foreignKeyUpdateRule) {}

        /**
         * Get foreign key update rule
         *
         * @return string
         */
        public function getForeignKeyUpdateRule() {}

        /**
         * Set foreign key delete rule
         *
         * @param string $foreignKeyDeleteRule
         */
        public function setForeignKeyDeleteRule($foreignKeyDeleteRule) {}

        /**
         * get foreign key delete rule
         *
         * @return string
         */
        public function getForeignKeyDeleteRule() {}
    }

    class ColumnObject
    {
        /** @var string */
        protected $name;
        /** @var string */
        protected $tableName;
        /** @var string */
        protected $schemaName;
        /** @var int */
        protected $ordinalPosition;
        /** @var string */
        protected $columnDefault;
        /** @var bool */
        protected $isNullable;
        /** @var string */
        protected $dataType;
        /** @var int */
        protected $characterMaximumLength;
        /** @var int */
        protected $characterOctetLength;
        /** @var int */
        protected $numericPrecision;
        /** @var int */
        protected $numericScale;
        /** @var bool */
        protected $numericUnsigned;
        /** @var array */
        protected $errata = [];

        /**
         * Constructor
         *
         * @param string $name
         * @param string $tableName
         * @param string $schemaName
         */
        public function __construct($name, $tableName, $schemaName = null) {}

        /**
         * Set name
         *
         * @param string $name
         */
        public function setName($name) {}

        /**
         * Get name
         *
         * @return string
         */
        public function getName() {}

        /**
         * Get table name
         *
         * @return string
         */
        public function getTableName() {}

        /**
         * Set table name
         *
         * @param string $tableName
         *
         * @return $this Provides a fluent interface
         */
        public function setTableName($tableName) {}

        /**
         * Set schema name
         *
         * @param string $schemaName
         */
        public function setSchemaName($schemaName) {}

        /**
         * Get schema name
         *
         * @return string
         */
        public function getSchemaName() {}

        /**
         * @return int $ordinalPosition
         */
        public function getOrdinalPosition() {}

        /**
         * @param int $ordinalPosition to set
         *
         * @return $this Provides a fluent interface
         */
        public function setOrdinalPosition($ordinalPosition) {}

        /**
         * @return null|string the $columnDefault
         */
        public function getColumnDefault() {}

        /**
         * @param mixed $columnDefault to set
         *
         * @return $this Provides a fluent interface
         */
        public function setColumnDefault($columnDefault) {}

        /**
         * @return bool $isNullable
         */
        public function getIsNullable() {}

        /**
         * @param bool $isNullable to set
         *
         * @return $this Provides a fluent interface
         */
        public function setIsNullable($isNullable) {}

        /**
         * @return bool $isNullable
         */
        public function isNullable() {}

        /**
         * @return null|string the $dataType
         */
        public function getDataType() {}

        /**
         * @param string $dataType the $dataType to set
         *
         * @return $this Provides a fluent interface
         */
        public function setDataType($dataType) {}

        /**
         * @return int|null the $characterMaximumLength
         */
        public function getCharacterMaximumLength() {}

        /**
         * @param int $characterMaximumLength the $characterMaximumLength to set
         *
         * @return $this Provides a fluent interface
         */
        public function setCharacterMaximumLength($characterMaximumLength) {}

        /**
         * @return int|null the $characterOctetLength
         */
        public function getCharacterOctetLength() {}

        /**
         * @param int $characterOctetLength the $characterOctetLength to set
         *
         * @return $this Provides a fluent interface
         */
        public function setCharacterOctetLength($characterOctetLength) {}

        /**
         * @return int the $numericPrecision
         */
        public function getNumericPrecision() {}

        /**
         * @param int $numericPrecision the $numericPrevision to set
         *
         * @return $this Provides a fluent interface
         */
        public function setNumericPrecision($numericPrecision) {}

        /**
         * @return int the $numericScale
         */
        public function getNumericScale() {}

        /**
         * @param int $numericScale the $numericScale to set
         *
         * @return $this Provides a fluent interface
         */
        public function setNumericScale($numericScale) {}

        /**
         * @return bool
         */
        public function getNumericUnsigned() {}

        /**
         * @param bool $numericUnsigned
         *
         * @return $this Provides a fluent interface
         */
        public function setNumericUnsigned($numericUnsigned) {}

        /**
         * @return bool
         */
        public function isNumericUnsigned() {}

        /**
         * @return array the $errata
         */
        public function getErratas() {}

        /**
         * @param array $erratas
         *
         * @return $this Provides a fluent interface
         */
        public function setErratas(array $erratas) {}

        /**
         * @param string $errataName
         *
         * @return mixed
         */
        public function getErrata($errataName) {}

        /**
         * @param string $errataName
         * @param mixed  $errataValue
         *
         * @return $this Provides a fluent interface
         */
        public function setErrata($errataName, $errataValue) {}
    }

    class TriggerObject
    {
        /** @var string */
        protected $name;
        /** @var string */
        protected $eventManipulation;
        /** @var string */
        protected $eventObjectCatalog;
        /** @var string */
        protected $eventObjectSchema;
        /** @var string */
        protected $eventObjectTable;
        /** @var string */
        protected $actionOrder;
        /** @var string */
        protected $actionCondition;
        /** @var string */
        protected $actionStatement;
        /** @var string */
        protected $actionOrientation;
        /** @var string */
        protected $actionTiming;
        /** @var string */
        protected $actionReferenceOldTable;
        /** @var string */
        protected $actionReferenceNewTable;
        /** @var string */
        protected $actionReferenceOldRow;
        /** @var string */
        protected $actionReferenceNewRow;
        /** @var \DateTime */
        protected $created;

        /**
         * Get Name.
         *
         * @return string
         */
        public function getName() {}

        /**
         * Set Name.
         *
         * @param string $name
         *
         * @return $this Provides a fluent interface
         */
        public function setName($name) {}

        /**
         * Get Event Manipulation.
         *
         * @return string
         */
        public function getEventManipulation() {}

        /**
         * Set Event Manipulation.
         *
         * @param string $eventManipulation
         *
         * @return $this Provides a fluent interface
         */
        public function setEventManipulation($eventManipulation) {}

        /**
         * Get Event Object Catalog.
         *
         * @return string
         */
        public function getEventObjectCatalog() {}

        /**
         * Set Event Object Catalog.
         *
         * @param string $eventObjectCatalog
         *
         * @return $this Provides a fluent interface
         */
        public function setEventObjectCatalog($eventObjectCatalog) {}

        /**
         * Get Event Object Schema.
         *
         * @return string
         */
        public function getEventObjectSchema() {}

        /**
         * Set Event Object Schema.
         *
         * @param string $eventObjectSchema
         *
         * @return $this Provides a fluent interface
         */
        public function setEventObjectSchema($eventObjectSchema) {}

        /**
         * Get Event Object Table.
         *
         * @return string
         */
        public function getEventObjectTable() {}

        /**
         * Set Event Object Table.
         *
         * @param string $eventObjectTable
         *
         * @return $this Provides a fluent interface
         */
        public function setEventObjectTable($eventObjectTable) {}

        /**
         * Get Action Order.
         *
         * @return string
         */
        public function getActionOrder() {}

        /**
         * Set Action Order.
         *
         * @param string $actionOrder
         *
         * @return $this Provides a fluent interface
         */
        public function setActionOrder($actionOrder) {}

        /**
         * Get Action Condition.
         *
         * @return string
         */
        public function getActionCondition() {}

        /**
         * Set Action Condition.
         *
         * @param string $actionCondition
         *
         * @return $this Provides a fluent interface
         */
        public function setActionCondition($actionCondition) {}

        /**
         * Get Action Statement.
         *
         * @return string
         */
        public function getActionStatement() {}

        /**
         * Set Action Statement.
         *
         * @param string $actionStatement
         *
         * @return $this Provides a fluent interface
         */
        public function setActionStatement($actionStatement) {}

        /**
         * Get Action Orientation.
         *
         * @return string
         */
        public function getActionOrientation() {}

        /**
         * Set Action Orientation.
         *
         * @param string $actionOrientation
         *
         * @return $this Provides a fluent interface
         */
        public function setActionOrientation($actionOrientation) {}

        /**
         * Get Action Timing.
         *
         * @return string
         */
        public function getActionTiming() {}

        /**
         * Set Action Timing.
         *
         * @param string $actionTiming
         *
         * @return $this Provides a fluent interface
         */
        public function setActionTiming($actionTiming) {}

        /**
         * Get Action Reference Old Table.
         *
         * @return string
         */
        public function getActionReferenceOldTable() {}

        /**
         * Set Action Reference Old Table.
         *
         * @param string $actionReferenceOldTable
         *
         * @return $this Provides a fluent interface
         */
        public function setActionReferenceOldTable($actionReferenceOldTable) {}

        /**
         * Get Action Reference New Table.
         *
         * @return string
         */
        public function getActionReferenceNewTable() {}

        /**
         * Set Action Reference New Table.
         *
         * @param string $actionReferenceNewTable
         *
         * @return $this Provides a fluent interface
         */
        public function setActionReferenceNewTable($actionReferenceNewTable) {}

        /**
         * Get Action Reference Old Row.
         *
         * @return string
         */
        public function getActionReferenceOldRow() {}

        /**
         * Set Action Reference Old Row.
         *
         * @param string $actionReferenceOldRow
         *
         * @return $this Provides a fluent interface
         */
        public function setActionReferenceOldRow($actionReferenceOldRow) {}

        /**
         * Get Action Reference New Row.
         *
         * @return string
         */
        public function getActionReferenceNewRow() {}

        /**
         * Set Action Reference New Row.
         *
         * @param string $actionReferenceNewRow
         *
         * @return $this Provides a fluent interface
         */
        public function setActionReferenceNewRow($actionReferenceNewRow) {}

        /**
         * Get Created.
         *
         * @return \DateTime
         */
        public function getCreated() {}

        /**
         * Set Created.
         *
         * @param \DateTime $created
         *
         * @return $this Provides a fluent interface
         */
        public function setCreated($created) {}
    }
}

namespace Laminas\Db {
    class Module
    {
        /**
         * Retrieve default laminas-db configuration for laminas-mvc context.
         *
         * @return array
         */
        public function getConfig() {}
    }

    class ConfigProvider
    {
        /**
         * Retrieve laminas-db default configuration.
         *
         * @return array
         */
        public function __invoke() {}

        /**
         * Retrieve laminas-db default dependency configuration.
         *
         * @return array
         */
        public function getDependencyConfig() {}
    }
}

namespace Laminas\Db\Adapter {
    interface StatementContainerInterface
    {
        /**
         * Set sql
         *
         * @param null|string $sql
         *
         * @return static
         */
        public function setSql($sql);

        /**
         * Get sql
         *
         * @return null|string
         */
        public function getSql();

        /**
         * Set parameter container
         *
         * @return static
         */
        public function setParameterContainer(\Laminas\Db\Adapter\ParameterContainer $parameterContainer);

        /**
         * Get parameter container
         *
         * @return null|ParameterContainer
         */
        public function getParameterContainer();
    }

    class StatementContainer implements \Laminas\Db\Adapter\StatementContainerInterface
    {
        /** @var string */
        protected $sql = '';
        /** @var ParameterContainer */
        protected $parameterContainer;

        /**
         * @param string|null $sql
         */
        public function __construct($sql = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /**
         * @param string $sql
         *
         * @return $this Provides a fluent interface
         */
        public function setSql($sql) {}

        /**
         * @return string
         */
        public function getSql() {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setParameterContainer(\Laminas\Db\Adapter\ParameterContainer $parameterContainer) {}

        /**
         * @return null|ParameterContainer
         */
        public function getParameterContainer() {}
    }

    trait AdapterAwareTrait
    {
        /** @var Adapter */
        protected $adapter;

        /**
         * Set db adapter
         *
         * @return $this Provides a fluent interface
         */
        public function setDbAdapter(\Laminas\Db\Adapter\Adapter $adapter) {}
    }

    /**
     * @property Driver\DriverInterface     $driver
     * @property Platform\PlatformInterface $platform
     */
    interface AdapterInterface
    {
        /**
         * @return Driver\DriverInterface
         */
        public function getDriver();

        /**
         * @return Platform\PlatformInterface
         */
        public function getPlatform();
    }

    class AdapterServiceFactory implements \Laminas\ServiceManager\FactoryInterface
    {
        /**
         * Create db adapter service
         *
         * @param string $requestedName
         * @param array  $options
         *
         * @return Adapter
         */
        public function __invoke(\Psr\Container\ContainerInterface $container, $requestedName, ?array $options = null) {}

        /**
         * Create db adapter service (v2)
         *
         * @return Adapter
         */
        public function createService(\Laminas\ServiceManager\ServiceLocatorInterface $container) {}
    }

    /**
     * Database adapter abstract service factory.
     *
     * Allows configuring several database instances (such as writer and reader).
     */
    class AdapterAbstractServiceFactory implements \Laminas\ServiceManager\AbstractFactoryInterface
    {
        /** @var array */
        protected $config;

        /**
         * Can we create an adapter by the requested name?
         *
         * @param string $requestedName
         *
         * @return bool
         */
        public function canCreate(\Psr\Container\ContainerInterface $container, $requestedName) {}

        /**
         * Determine if we can create a service with name (SM v2 compatibility)
         *
         * @param string $name
         * @param string $requestedName
         *
         * @return bool
         */
        public function canCreateServiceWithName(\Laminas\ServiceManager\ServiceLocatorInterface $serviceLocator, $name, $requestedName) {}

        /**
         * Create a DB adapter
         *
         * @param string $requestedName
         * @param array  $options
         *
         * @return Adapter
         */
        public function __invoke(\Psr\Container\ContainerInterface $container, $requestedName, ?array $options = null) {}

        /**
         * Create service with name
         *
         * @param string $name
         * @param string $requestedName
         *
         * @return Adapter
         */
        public function createServiceWithName(\Laminas\ServiceManager\ServiceLocatorInterface $serviceLocator, $name, $requestedName) {}

        /**
         * Get db configuration, if any
         *
         * @return array
         */
        protected function getConfig(\Interop\Container\ContainerInterface $container) {}
    }

    class AdapterServiceDelegator
    {
        public function __construct(string $adapterName = \Laminas\Db\Adapter\AdapterInterface::class) {}

        public static function __set_state(array $state): self {}

        /** @return AdapterInterface */
        public function __invoke(\Psr\Container\ContainerInterface $container, string $name, callable $callback, ?array $options = null) {}
    }

    class ParameterContainer implements \Iterator, \ArrayAccess, \Countable
    {
        public const TYPE_AUTO    = 'auto';
        public const TYPE_NULL    = 'null';
        public const TYPE_DOUBLE  = 'double';
        public const TYPE_INTEGER = 'integer';
        public const TYPE_BINARY  = 'binary';
        public const TYPE_STRING  = 'string';
        public const TYPE_LOB     = 'lob';
        /**
         * Data
         *
         * @var array
         */
        protected $data = [];
        /** @var array */
        protected $positions = [];
        /**
         * Errata
         *
         * @var array
         */
        protected $errata = [];
        /**
         * Max length
         *
         * @var array
         */
        protected $maxLength = [];
        /** @var array */
        protected $nameMapping = [];

        /**
         * Constructor
         *
         * @param array $data
         */
        public function __construct(array $data = []) {}

        /**
         * Offset exists
         *
         * @param string $name
         *
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($name) {}

        /**
         * Offset get
         *
         * @param string $name
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($name) {}

        /**
         * @param string|int $name
         * @param string|int $from
         *
         * @return void
         */
        public function offsetSetReference($name, $from) {}

        /**
         * Offset set
         *
         * @param string|int $name
         * @param mixed      $value
         * @param mixed      $errata
         * @param mixed      $maxLength
         *
         * @throws Exception\InvalidArgumentException
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($name, $value, $errata = null, $maxLength = null) {}

        /**
         * Offset unset
         *
         * @param string $name
         *
         * @return $this Provides a fluent interface
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($name) {}

        /**
         * Set from array
         *
         * @param array $data
         *
         * @return $this Provides a fluent interface
         */
        public function setFromArray(array $data) {}

        /**
         * Offset set max length
         *
         * @param string|int $name
         * @param mixed      $maxLength
         */
        public function offsetSetMaxLength($name, $maxLength) {}

        /**
         * Offset get max length
         *
         * @param string|int $name
         *
         * @return mixed
         * @throws Exception\InvalidArgumentException
         */
        public function offsetGetMaxLength($name) {}

        /**
         * Offset has max length
         *
         * @param string|int $name
         *
         * @return bool
         */
        public function offsetHasMaxLength($name) {}

        /**
         * Offset unset max length
         *
         * @param string|int $name
         *
         * @throws Exception\InvalidArgumentException
         */
        public function offsetUnsetMaxLength($name) {}

        /**
         * Get max length iterator
         *
         * @return \ArrayIterator
         */
        public function getMaxLengthIterator() {}

        /**
         * Offset set errata
         *
         * @param string|int $name
         * @param mixed      $errata
         */
        public function offsetSetErrata($name, $errata) {}

        /**
         * Offset get errata
         *
         * @param string|int $name
         *
         * @return mixed
         * @throws Exception\InvalidArgumentException
         */
        public function offsetGetErrata($name) {}

        /**
         * Offset has errata
         *
         * @param string|int $name
         *
         * @return bool
         */
        public function offsetHasErrata($name) {}

        /**
         * Offset unset errata
         *
         * @param string|int $name
         *
         * @throws Exception\InvalidArgumentException
         */
        public function offsetUnsetErrata($name) {}

        /**
         * Get errata iterator
         *
         * @return \ArrayIterator
         */
        public function getErrataIterator() {}

        /**
         * getNamedArray
         *
         * @return array
         */
        public function getNamedArray() {}

        /**
         * getNamedArray
         *
         * @return array
         */
        public function getPositionalArray() {}

        /**
         * count
         *
         * @return int
         */
        #[\ReturnTypeWillChange]
        public function count() {}

        /**
         * Current
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function current() {}

        /**
         * Next
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function next() {}

        /**
         * Key
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function key() {}

        /**
         * Valid
         *
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function valid() {}

        /**
         * Rewind
         */
        #[\ReturnTypeWillChange]
        public function rewind() {}

        /**
         * @param array|ParameterContainer $parameters
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function merge($parameters) {}
    }

    interface AdapterAwareInterface
    {
        /**
         * Set db adapter
         *
         * @return AdapterAwareInterface
         */
        public function setDbAdapter(\Laminas\Db\Adapter\Adapter $adapter);
    }

    /**
     * @property Driver\DriverInterface     $driver
     * @property Platform\PlatformInterface $platform
     */
    class Adapter implements \Laminas\Db\Adapter\AdapterInterface, \Laminas\Db\Adapter\Profiler\ProfilerAwareInterface
    {
        /**
         * Query Mode Constants
         */
        public const QUERY_MODE_EXECUTE = 'execute';
        public const QUERY_MODE_PREPARE = 'prepare';
        /**
         * Prepare Type Constants
         */
        public const PREPARE_TYPE_POSITIONAL        = 'positional';
        public const PREPARE_TYPE_NAMED             = 'named';
        public const FUNCTION_FORMAT_PARAMETER_NAME = 'formatParameterName';
        public const FUNCTION_QUOTE_IDENTIFIER      = 'quoteIdentifier';
        public const FUNCTION_QUOTE_VALUE           = 'quoteValue';
        public const VALUE_QUOTE_SEPARATOR          = 'quoteSeparator';
        /** @var Driver\DriverInterface */
        protected $driver;
        /** @var Platform\PlatformInterface */
        protected $platform;
        /** @var Profiler\ProfilerInterface */
        protected $profiler;
        /** @var \Laminas\Db\ResultSet\ResultSetInterface */
        protected $queryResultSetPrototype;
        /** @var Driver\StatementInterface */
        protected $lastPreparedStatement;

        /**
         * @param Driver\DriverInterface|array $driver
         *
         * @throws Exception\InvalidArgumentException
         */
        public function __construct($driver, ?\Laminas\Db\Adapter\Platform\PlatformInterface $platform = null, ?\Laminas\Db\ResultSet\ResultSetInterface $queryResultPrototype = null, ?\Laminas\Db\Adapter\Profiler\ProfilerInterface $profiler = null) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setProfiler(\Laminas\Db\Adapter\Profiler\ProfilerInterface $profiler) {}

        /**
         * @return null|Profiler\ProfilerInterface
         */
        public function getProfiler() {}

        /**
         * getDriver()
         *
         * @return Driver\DriverInterface
         * @throws Exception\RuntimeException
         */
        public function getDriver() {}

        /**
         * @return Platform\PlatformInterface
         */
        public function getPlatform() {}

        /**
         * @return \Laminas\Db\ResultSet\ResultSetInterface
         */
        public function getQueryResultSetPrototype() {}

        /** @return string */
        public function getCurrentSchema() {}

        /**
         * query() is a convenience function
         *
         * @param string                          $sql
         * @param string|array|ParameterContainer $parametersOrQueryMode
         *
         * @return Driver\StatementInterface|\Laminas\Db\ResultSet\ResultSet
         * @throws Exception\InvalidArgumentException
         *
         * @psalm-taint-sink sql $sql
         */
        public function query($sql, $parametersOrQueryMode = self::QUERY_MODE_PREPARE, ?\Laminas\Db\ResultSet\ResultSetInterface $resultPrototype = null) {}

        /**
         * Create statement
         *
         * @param string                        $initialSql
         * @param null|ParameterContainer|array $initialParameters
         *
         * @return Driver\StatementInterface
         */
        public function createStatement($initialSql = null, $initialParameters = null) {}

        public function getHelpers() {}

        /**
         * @param string $name
         *
         * @return Driver\DriverInterface|Platform\PlatformInterface
         * @throws Exception\InvalidArgumentException
         */
        public function __get($name) {}

        /**
         * @param array $parameters
         *
         * @return Driver\DriverInterface
         * @throws \InvalidArgumentException
         * @throws Exception\InvalidArgumentException
         */
        protected function createDriver($parameters) {}

        /**
         * @param array $parameters
         *
         * @return Platform\PlatformInterface
         */
        protected function createPlatform(array $parameters) {}

        /**
         * @param array $parameters
         *
         * @return Profiler\ProfilerInterface
         * @throws Exception\InvalidArgumentException
         */
        protected function createProfiler($parameters) {}

        /**
         * @param array $parameters
         *
         * @return Driver\DriverInterface
         * @throws \InvalidArgumentException
         * @throws Exception\InvalidArgumentException
         * @deprecated
         *
         */
        protected function createDriverFromParameters(array $parameters) {}

        /**
         * @return Platform\PlatformInterface
         * @deprecated
         *
         */
        protected function createPlatformFromDriver(\Laminas\Db\Adapter\Driver\DriverInterface $driver) {}
    }
}

namespace Laminas\Db\Adapter\Profiler {
    interface ProfilerAwareInterface
    {
        public function setProfiler(\Laminas\Db\Adapter\Profiler\ProfilerInterface $profiler);
    }

    interface ProfilerInterface
    {
        /**
         * @param string|\Laminas\Db\Adapter\StatementContainerInterface $target
         *
         * @return mixed
         */
        public function profilerStart($target);

        public function profilerFinish();
    }

    class Profiler implements \Laminas\Db\Adapter\Profiler\ProfilerInterface
    {
        /** @var array */
        protected $profiles = [];
        /** @var null */
        protected $currentIndex = 0;

        /**
         * @param string|\Laminas\Db\Adapter\StatementContainerInterface $target
         *
         * @return $this Provides a fluent interface
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function profilerStart($target) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function profilerFinish() {}

        /**
         * @return array|null
         */
        public function getLastProfile() {}

        /**
         * @return array
         */
        public function getProfiles() {}
    }
}

namespace Laminas\Db\Adapter\Driver {
    interface DriverInterface
    {
        public const PARAMETERIZATION_POSITIONAL = 'positional';
        public const PARAMETERIZATION_NAMED      = 'named';
        public const NAME_FORMAT_CAMELCASE       = 'camelCase';
        public const NAME_FORMAT_NATURAL         = 'natural';

        /**
         * Get database platform name
         *
         * @param string $nameFormat
         *
         * @return string
         */
        public function getDatabasePlatformName($nameFormat = self::NAME_FORMAT_CAMELCASE);

        /**
         * Check environment
         *
         * @return bool
         */
        public function checkEnvironment();

        /**
         * Get connection
         *
         * @return ConnectionInterface
         */
        public function getConnection();

        /**
         * Create statement
         *
         * @param string|resource $sqlOrResource
         *
         * @return StatementInterface
         */
        public function createStatement($sqlOrResource = null);

        /**
         * Create result
         *
         * @param resource $resource
         *
         * @return ResultInterface
         */
        public function createResult($resource);

        /**
         * Get prepare type
         *
         * @return string
         */
        public function getPrepareType();

        /**
         * Format parameter name
         *
         * @param string $name
         * @param mixed  $type
         *
         * @return string
         */
        public function formatParameterName($name, $type = null);

        /**
         * Get last generated value
         *
         * @return mixed
         */
        public function getLastGeneratedValue();
    }

    interface StatementInterface extends \Laminas\Db\Adapter\StatementContainerInterface
    {
        /**
         * Get resource
         *
         * @return resource
         */
        public function getResource();

        /**
         * Prepare sql
         *
         * @param string $sql
         */
        public function prepare($sql = null);

        /**
         * Check if is prepared
         *
         * @return bool
         */
        public function isPrepared();

        /**
         * Execute
         *
         * @param null|array|\Laminas\Db\Adapter\ParameterContainer $parameters
         *
         * @return ResultInterface
         */
        public function execute($parameters = null);
    }

    interface ResultInterface extends \Countable, \Iterator
    {
        /**
         * Force buffering
         *
         * @return void
         */
        public function buffer();

        /**
         * Check if is buffered
         *
         * @return bool|null
         */
        public function isBuffered();

        /**
         * Is query result?
         *
         * @return bool
         */
        public function isQueryResult();

        /**
         * Get affected rows
         *
         * @return int
         */
        public function getAffectedRows();

        /**
         * Get generated value
         *
         * @return mixed|null
         */
        public function getGeneratedValue();

        /**
         * Get the resource
         *
         * @return mixed
         */
        public function getResource();

        /**
         * Get field count
         *
         * @return int
         */
        public function getFieldCount();
    }

    interface ConnectionInterface
    {
        /**
         * Get current schema
         *
         * @return string
         */
        public function getCurrentSchema();

        /**
         * Get resource
         *
         * @return mixed
         */
        public function getResource();

        /**
         * Connect
         *
         * @return ConnectionInterface
         */
        public function connect();

        /**
         * Is connected
         *
         * @return bool
         */
        public function isConnected();

        /**
         * Disconnect
         *
         * @return ConnectionInterface
         */
        public function disconnect();

        /**
         * Begin transaction
         *
         * @return ConnectionInterface
         */
        public function beginTransaction();

        /**
         * Commit
         *
         * @return ConnectionInterface
         */
        public function commit();

        /**
         * Rollback
         *
         * @return ConnectionInterface
         */
        public function rollback();

        /**
         * Execute
         *
         * @param string $sql
         *
         * @return ResultInterface
         */
        public function execute($sql);

        /**
         * Get last generated id
         *
         * @param null $name Ignored
         *
         * @return int
         */
        public function getLastGeneratedValue($name = null);
    }

    abstract class AbstractConnection implements \Laminas\Db\Adapter\Driver\ConnectionInterface, \Laminas\Db\Adapter\Profiler\ProfilerAwareInterface
    {
        /** @var array */
        protected $connectionParameters = [];
        /** @var string|null */
        protected $driverName;
        /** @var boolean */
        protected $inTransaction = false;
        /**
         * Nested transactions count.
         *
         * @var integer
         */
        protected $nestedTransactionsCount = 0;
        /** @var \Laminas\Db\Adapter\Profiler\ProfilerInterface|null */
        protected $profiler;
        /** @var resource|null */
        protected $resource;

        /**
         * {@inheritDoc}
         */
        public function disconnect() {}

        /**
         * Get connection parameters
         *
         * @return array
         */
        public function getConnectionParameters() {}

        /**
         * Get driver name
         *
         * @return null|string
         */
        public function getDriverName() {}

        /**
         * @return null|\Laminas\Db\Adapter\Profiler\ProfilerInterface
         */
        public function getProfiler() {}

        /**
         * {@inheritDoc}
         *
         * @return resource
         */
        public function getResource() {}

        /**
         * Checks whether the connection is in transaction state.
         *
         * @return boolean
         */
        public function inTransaction() {}

        /**
         * @param array $connectionParameters
         *
         * @return $this Provides a fluent interface
         */
        public function setConnectionParameters(array $connectionParameters) {}

        /**
         * {@inheritDoc}
         *
         * @return $this Provides a fluent interface
         */
        public function setProfiler(\Laminas\Db\Adapter\Profiler\ProfilerInterface $profiler) {}
    }
}

namespace Laminas\Db\Adapter\Driver\Sqlsrv {
    class Sqlsrv implements \Laminas\Db\Adapter\Driver\DriverInterface, \Laminas\Db\Adapter\Profiler\ProfilerAwareInterface
    {
        /** @var Connection */
        protected $connection;
        /** @var Statement */
        protected $statementPrototype;
        /** @var Result */
        protected $resultPrototype;
        /** @var null|\Laminas\Db\Adapter\Profiler\ProfilerInterface */
        protected $profiler;

        /**
         * @param array|Connection|resource $connection
         */
        public function __construct($connection, ?\Laminas\Db\Adapter\Driver\Sqlsrv\Statement $statementPrototype = null, ?\Laminas\Db\Adapter\Driver\Sqlsrv\Result $resultPrototype = null) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setProfiler(\Laminas\Db\Adapter\Profiler\ProfilerInterface $profiler) {}

        /**
         * @return null|\Laminas\Db\Adapter\Profiler\ProfilerInterface
         */
        public function getProfiler() {}

        /**
         * Register connection
         *
         * @return $this Provides a fluent interface
         */
        public function registerConnection(\Laminas\Db\Adapter\Driver\Sqlsrv\Connection $connection) {}

        /**
         * Register statement prototype
         *
         * @return $this Provides a fluent interface
         */
        public function registerStatementPrototype(\Laminas\Db\Adapter\Driver\Sqlsrv\Statement $statementPrototype) {}

        /**
         * Register result prototype
         *
         * @return $this Provides a fluent interface
         */
        public function registerResultPrototype(\Laminas\Db\Adapter\Driver\Sqlsrv\Result $resultPrototype) {}

        /**
         * Get database paltform name
         *
         * @param string $nameFormat
         *
         * @return string
         */
        public function getDatabasePlatformName($nameFormat = self::NAME_FORMAT_CAMELCASE) {}

        /**
         * Check environment
         *
         * @return void
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function checkEnvironment() {}

        /**
         * @return Connection
         */
        public function getConnection() {}

        /**
         * @param string|resource $sqlOrResource
         *
         * @return Statement
         */
        public function createStatement($sqlOrResource = null) {}

        /**
         * @param resource $resource
         *
         * @return Result
         */
        public function createResult($resource) {}

        /**
         * @return Result
         */
        public function getResultPrototype() {}

        /**
         * @return string
         */
        public function getPrepareType() {}

        /**
         * @param string $name
         * @param mixed  $type
         *
         * @return string
         */
        public function formatParameterName($name, $type = null) {}

        /**
         * @return mixed
         */
        public function getLastGeneratedValue() {}
    }

    class Statement implements \Laminas\Db\Adapter\Driver\StatementInterface, \Laminas\Db\Adapter\Profiler\ProfilerAwareInterface
    {
        /** @var resource */
        protected $sqlsrv;
        /** @var Sqlsrv */
        protected $driver;
        /** @var \Laminas\Db\Adapter\Profiler\ProfilerInterface */
        protected $profiler;
        /** @var string */
        protected $sql;
        /** @var bool */
        protected $isQuery;
        /** @var array */
        protected $parameterReferences = [];
        /** @var \Laminas\Db\Adapter\ParameterContainer */
        protected $parameterContainer;
        /** @var resource */
        protected $resource;
        /** @var bool */
        protected $isPrepared = false;
        /** @var array */
        protected $prepareParams = [];
        /** @var array */
        protected $prepareOptions = [];
        /** @var array */
        protected $parameterReferenceValues = [];

        /**
         * Set driver
         *
         * @return $this Provides a fluent interface
         */
        public function setDriver(\Laminas\Db\Adapter\Driver\Sqlsrv\Sqlsrv $driver) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setProfiler(\Laminas\Db\Adapter\Profiler\ProfilerInterface $profiler) {}

        /**
         * @return null|\Laminas\Db\Adapter\Profiler\ProfilerInterface
         */
        public function getProfiler() {}

        /**
         * One of two resource types will be provided here:
         * a) "SQL Server Connection" when a prepared statement needs to still be produced
         * b) "SQL Server Statement" when a prepared statement has been already produced
         * (there will need to already be a bound param set if it applies to this query)
         *
         * @param resource $resource
         *
         * @return $this Provides a fluent interface
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function initialize($resource) {}

        /**
         * Set parameter container
         *
         * @return $this Provides a fluent interface
         */
        public function setParameterContainer(\Laminas\Db\Adapter\ParameterContainer $parameterContainer) {}

        /**
         * @return \Laminas\Db\Adapter\ParameterContainer
         */
        public function getParameterContainer() {}

        /**
         * @param resource $resource
         *
         * @return $this Provides a fluent interface
         */
        public function setResource($resource) {}

        /**
         * Get resource
         *
         * @return resource
         */
        public function getResource() {}

        /**
         * @param string $sql
         *
         * @return $this Provides a fluent interface
         */
        public function setSql($sql) {}

        /**
         * Get sql
         *
         * @return string
         */
        public function getSql() {}

        /**
         * @param string $sql
         * @param array  $options
         *
         * @return $this Provides a fluent interface
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function prepare($sql = null, array $options = []) {}

        /**
         * @return bool
         */
        public function isPrepared() {}

        /**
         * Execute
         *
         * @param null|array|\Laminas\Db\Adapter\ParameterContainer $parameters
         *
         * @return Result
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function execute($parameters = null) {}

        /**
         * Bind parameters from container
         */
        protected function bindParametersFromContainer() {}

        /**
         * @param array $prepareParams
         */
        public function setPrepareParams(array $prepareParams) {}

        /**
         * @param array $prepareOptions
         */
        public function setPrepareOptions(array $prepareOptions) {}
    }

    class Result implements \Iterator, \Laminas\Db\Adapter\Driver\ResultInterface
    {
        /** @var resource */
        protected $resource;
        /** @var bool */
        protected $currentData = false;
        /** @var bool */
        protected $currentComplete = false;
        /** @var int */
        protected $position = -1;
        /** @var mixed */
        protected $generatedValue;

        /**
         * Initialize
         *
         * @param resource $resource
         * @param mixed    $generatedValue
         *
         * @return $this Provides a fluent interface
         */
        public function initialize($resource, $generatedValue = null) {}

        /**
         * @return null
         */
        public function buffer() {}

        /**
         * @return bool
         */
        public function isBuffered() {}

        /**
         * Get resource
         *
         * @return resource
         */
        public function getResource() {}

        /**
         * Current
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function current() {}

        /**
         * Next
         *
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function next() {}

        /**
         * Load
         *
         * @param int $row
         *
         * @return mixed
         */
        protected function load($row = \SQLSRV_SCROLL_NEXT) {}

        /**
         * Key
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function key() {}

        /**
         * Rewind
         *
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function rewind() {}

        /**
         * Valid
         *
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function valid() {}

        /**
         * Count
         *
         * @return int
         */
        #[\ReturnTypeWillChange]
        public function count() {}

        /**
         * @return bool|int
         */
        public function getFieldCount() {}

        /**
         * Is query result
         *
         * @return bool
         */
        public function isQueryResult() {}

        /**
         * Get affected rows
         *
         * @return int
         */
        public function getAffectedRows() {}

        /**
         * @return mixed|null
         */
        public function getGeneratedValue() {}
    }

    class Connection extends \Laminas\Db\Adapter\Driver\AbstractConnection
    {
        /** @var Sqlsrv */
        protected $driver;

        /**
         * Constructor
         *
         * @param array|resource $connectionInfo
         *
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function __construct($connectionInfo) {}

        /**
         * Set driver
         *
         * @return $this Provides a fluent interface
         */
        public function setDriver(\Laminas\Db\Adapter\Driver\Sqlsrv\Sqlsrv $driver) {}

        /**
         * {@inheritDoc}
         */
        public function getCurrentSchema() {}

        /**
         * Set resource
         *
         * @param resource $resource
         *
         * @return $this Provides a fluent interface
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function setResource($resource) {}

        /**
         * {@inheritDoc}
         *
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function connect() {}

        /**
         * {@inheritDoc}
         */
        public function isConnected() {}

        /**
         * {@inheritDoc}
         */
        public function disconnect() {}

        /**
         * {@inheritDoc}
         */
        public function beginTransaction() {}

        /**
         * {@inheritDoc}
         */
        public function commit() {}

        /**
         * {@inheritDoc}
         */
        public function rollback() {}

        /**
         * {@inheritDoc}
         *
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function execute($sql) {}

        /**
         * Prepare
         *
         * @param string $sql
         *
         * @return string
         */
        public function prepare($sql) {}

        /**
         * {@inheritDoc}
         *
         * @return mixed
         */
        public function getLastGeneratedValue($name = null) {}
    }
}

namespace Laminas\Db\Exception {
    interface ExceptionInterface
    {
    }

    class ErrorException extends \Exception implements \Laminas\Db\Exception\ExceptionInterface
    {
    }

    class RuntimeException extends \RuntimeException implements \Laminas\Db\Exception\ExceptionInterface
    {
    }

    class UnexpectedValueException extends \UnexpectedValueException implements \Laminas\Db\Exception\ExceptionInterface
    {
    }

    class InvalidArgumentException extends \InvalidArgumentException implements \Laminas\Db\Exception\ExceptionInterface
    {
    }
}

namespace Laminas\Db\Adapter\Exception {
    interface ExceptionInterface extends \Laminas\Db\Exception\ExceptionInterface
    {
    }

    class ErrorException extends \Laminas\Db\Exception\ErrorException implements \Laminas\Db\Adapter\Exception\ExceptionInterface
    {
    }

    class RuntimeException extends \Laminas\Db\Exception\RuntimeException implements \Laminas\Db\Adapter\Exception\ExceptionInterface
    {
    }

    class UnexpectedValueException extends \Laminas\Db\Exception\UnexpectedValueException implements \Laminas\Db\Adapter\Exception\ExceptionInterface
    {
    }

    class InvalidQueryException extends \Laminas\Db\Adapter\Exception\UnexpectedValueException implements \Laminas\Db\Adapter\Exception\ExceptionInterface
    {
    }

    class InvalidConnectionParametersException extends \Laminas\Db\Adapter\Exception\RuntimeException implements \Laminas\Db\Adapter\Exception\ExceptionInterface
    {
        /** @var int */
        protected $parameters;

        /**
         * @param string $message
         * @param int    $parameters
         */
        public function __construct($message, $parameters) {}
    }

    class InvalidArgumentException extends \Laminas\Db\Exception\InvalidArgumentException implements \Laminas\Db\Adapter\Exception\ExceptionInterface
    {
    }
}

namespace Laminas\Db\Adapter\Driver\Sqlsrv\Exception {
    interface ExceptionInterface extends \Laminas\Db\Adapter\Exception\ExceptionInterface
    {
    }

    class ErrorException extends \Laminas\Db\Adapter\Exception\ErrorException implements \Laminas\Db\Adapter\Driver\Sqlsrv\Exception\ExceptionInterface
    {
        /**
         * Errors
         *
         * @var array
         */
        protected $errors = [];

        /**
         * Construct
         *
         * @param bool $errors
         */
        public function __construct($errors = false) {}
    }
}

namespace Laminas\Db\Adapter\Driver\IbmDb2 {
    class Statement implements \Laminas\Db\Adapter\Driver\StatementInterface, \Laminas\Db\Adapter\Profiler\ProfilerAwareInterface
    {
        /** @var resource */
        protected $db2;
        /** @var IbmDb2 */
        protected $driver;
        /** @var \Laminas\Db\Adapter\Profiler\ProfilerInterface */
        protected $profiler;
        /** @var string */
        protected $sql = '';
        /** @var \Laminas\Db\Adapter\ParameterContainer */
        protected $parameterContainer;
        /** @var bool */
        protected $isPrepared = false;
        /** @var resource */
        protected $resource;

        /**
         * @param resource $resource
         *
         * @return $this Provides a fluent interface
         */
        public function initialize($resource) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setDriver(\Laminas\Db\Adapter\Driver\IbmDb2\IbmDb2 $driver) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setProfiler(\Laminas\Db\Adapter\Profiler\ProfilerInterface $profiler) {}

        /**
         * @return null|\Laminas\Db\Adapter\Profiler\ProfilerInterface
         */
        public function getProfiler() {}

        /**
         * Set sql
         *
         * @param null|string $sql
         *
         * @return $this Provides a fluent interface
         */
        public function setSql($sql) {}

        /**
         * Get sql
         *
         * @return null|string
         */
        public function getSql() {}

        /**
         * Set parameter container
         *
         * @return $this Provides a fluent interface
         */
        public function setParameterContainer(\Laminas\Db\Adapter\ParameterContainer $parameterContainer) {}

        /**
         * Get parameter container
         *
         * @return mixed
         */
        public function getParameterContainer() {}

        /**
         * @param resource $resource
         *
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function setResource($resource) {}

        /**
         * Get resource
         *
         * @return resource
         */
        public function getResource() {}

        /**
         * Prepare sql
         *
         * @param string|null $sql
         *
         * @return $this Provides a fluent interface
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function prepare($sql = null) {}

        /**
         * Check if is prepared
         *
         * @return bool
         */
        public function isPrepared() {}

        /**
         * Execute
         *
         * @param null|array|\Laminas\Db\Adapter\ParameterContainer $parameters
         *
         * @return Result
         */
        public function execute($parameters = null) {}
    }

    class IbmDb2 implements \Laminas\Db\Adapter\Driver\DriverInterface, \Laminas\Db\Adapter\Profiler\ProfilerAwareInterface
    {
        /** @var Connection */
        protected $connection;
        /** @var Statement */
        protected $statementPrototype;
        /** @var Result */
        protected $resultPrototype;
        /** @var \Laminas\Db\Adapter\Profiler\ProfilerInterface */
        protected $profiler;

        /**
         * @param array|Connection|resource $connection
         */
        public function __construct($connection, ?\Laminas\Db\Adapter\Driver\IbmDb2\Statement $statementPrototype = null, ?\Laminas\Db\Adapter\Driver\IbmDb2\Result $resultPrototype = null) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setProfiler(\Laminas\Db\Adapter\Profiler\ProfilerInterface $profiler) {}

        /**
         * @return null|\Laminas\Db\Adapter\Profiler\ProfilerInterface
         */
        public function getProfiler() {}

        /**
         * @return $this Provides a fluent interface
         */
        public function registerConnection(\Laminas\Db\Adapter\Driver\IbmDb2\Connection $connection) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function registerStatementPrototype(\Laminas\Db\Adapter\Driver\IbmDb2\Statement $statementPrototype) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function registerResultPrototype(\Laminas\Db\Adapter\Driver\IbmDb2\Result $resultPrototype) {}

        /**
         * Get database platform name
         *
         * @param string $nameFormat
         *
         * @return string
         */
        public function getDatabasePlatformName($nameFormat = self::NAME_FORMAT_CAMELCASE) {}

        /**
         * Check environment
         *
         * @return void
         */
        public function checkEnvironment() {}

        /**
         * Get connection
         *
         * @return Connection
         */
        public function getConnection() {}

        /**
         * Create statement
         *
         * @param string|resource $sqlOrResource
         *
         * @return Statement
         */
        public function createStatement($sqlOrResource = null) {}

        /**
         * Create result
         *
         * @param resource $resource
         *
         * @return Result
         */
        public function createResult($resource) {}

        /**
         * @return Result
         */
        public function getResultPrototype() {}

        /**
         * Get prepare type
         *
         * @return string
         */
        public function getPrepareType() {}

        /**
         * Format parameter name
         *
         * @param string $name
         * @param mixed  $type
         *
         * @return string
         */
        public function formatParameterName($name, $type = null) {}

        /**
         * Get last generated value
         *
         * @return mixed
         */
        public function getLastGeneratedValue() {}
    }

    class Result implements \Laminas\Db\Adapter\Driver\ResultInterface
    {
        /** @var resource */
        protected $resource;
        /** @var int */
        protected $position = 0;
        /** @var bool */
        protected $currentComplete = false;
        /** @var mixed */
        protected $currentData;
        /** @var mixed */
        protected $generatedValue;

        /**
         * @param resource $resource
         * @param mixed    $generatedValue
         *
         * @return $this Provides a fluent interface
         */
        public function initialize($resource, $generatedValue = null) {}

        /**
         * (PHP 5 &gt;= 5.0.0)<br/>
         * Return the current element
         *
         * @link http://php.net/manual/en/iterator.current.php
         *
         * @return mixed Can return any type.
         */
        #[\ReturnTypeWillChange]
        public function current() {}

        /**
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function next() {}

        /**
         * @return int|string
         */
        #[\ReturnTypeWillChange]
        public function key() {}

        /**
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function valid() {}

        /**
         * (PHP 5 &gt;= 5.0.0)<br/>
         * Rewind the Iterator to the first element
         *
         * @link http://php.net/manual/en/iterator.rewind.php
         *
         * @return void Any returned value is ignored.
         */
        #[\ReturnTypeWillChange]
        public function rewind() {}

        /**
         * Force buffering
         *
         * @return null
         */
        public function buffer() {}

        /**
         * Check if is buffered
         *
         * @return bool|null
         */
        public function isBuffered() {}

        /**
         * Is query result?
         *
         * @return bool
         */
        public function isQueryResult() {}

        /**
         * Get affected rows
         *
         * @return int
         */
        public function getAffectedRows() {}

        /**
         * Get generated value
         *
         * @return mixed|null
         */
        public function getGeneratedValue() {}

        /**
         * Get the resource
         *
         * @return mixed
         */
        public function getResource() {}

        /**
         * Get field count
         *
         * @return int
         */
        public function getFieldCount() {}

        /**
         * @return int
         */
        #[\ReturnTypeWillChange]
        public function count() {}
    }

    class Connection extends \Laminas\Db\Adapter\Driver\AbstractConnection
    {
        /** @var IbmDb2 */
        protected $driver;
        /**
         * i5 OS
         *
         * @var bool
         */
        protected $i5;
        /**
         * Previous autocommit set
         *
         * @var mixed
         */
        protected $prevAutocommit;

        /**
         * Constructor
         *
         * @param array|resource|null $connectionParameters (ibm_db2 connection resource)
         *
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function __construct($connectionParameters = null) {}

        /**
         * Set driver
         *
         * @return $this Provides a fluent interface
         */
        public function setDriver(\Laminas\Db\Adapter\Driver\IbmDb2\IbmDb2 $driver) {}

        /**
         * @param resource $resource DB2 resource
         *
         * @return $this Provides a fluent interface
         */
        public function setResource($resource) {}

        /**
         * {@inheritDoc}
         */
        public function getCurrentSchema() {}

        /**
         * {@inheritDoc}
         */
        public function connect() {}

        /**
         * {@inheritDoc}
         */
        public function isConnected() {}

        /**
         * {@inheritDoc}
         */
        public function disconnect() {}

        /**
         * {@inheritDoc}
         */
        public function beginTransaction() {}

        /**
         * {@inheritDoc}
         */
        public function commit() {}

        /**
         * Rollback
         *
         * @return $this Provides a fluent interface
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function rollback() {}

        /**
         * {@inheritDoc}
         */
        public function execute($sql) {}

        /**
         * {@inheritDoc}
         */
        public function getLastGeneratedValue($name = null) {}

        /**
         * Determine if the OS is OS400 (AS400, IBM i)
         *
         * @return bool
         */
        protected function isI5() {}
    }
}

namespace Laminas\Db\Adapter\Driver\Pdo {
    class Statement implements \Laminas\Db\Adapter\Driver\StatementInterface, \Laminas\Db\Adapter\Profiler\ProfilerAwareInterface
    {
        /** @var \PDO */
        protected $pdo;
        /** @var \Laminas\Db\Adapter\Profiler\ProfilerInterface */
        protected $profiler;
        /** @var Pdo */
        protected $driver;
        /** @var string */
        protected $sql = '';
        /** @var bool */
        protected $isQuery;
        /** @var \Laminas\Db\Adapter\ParameterContainer */
        protected $parameterContainer;
        /** @var bool */
        protected $parametersBound = false;
        /** @var \PDOStatement */
        protected $resource;
        /** @var bool */
        protected $isPrepared = false;

        /**
         * Set driver
         *
         * @return $this Provides a fluent interface
         */
        public function setDriver(\Laminas\Db\Adapter\Driver\Pdo\Pdo $driver) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setProfiler(\Laminas\Db\Adapter\Profiler\ProfilerInterface $profiler) {}

        /**
         * @return null|\Laminas\Db\Adapter\Profiler\ProfilerInterface
         */
        public function getProfiler() {}

        /**
         * Initialize
         *
         * @return $this Provides a fluent interface
         */
        public function initialize(\PDO $connectionResource) {}

        /**
         * Set resource
         *
         * @return $this Provides a fluent interface
         */
        public function setResource(\PDOStatement $pdoStatement) {}

        /**
         * Get resource
         *
         * @return mixed
         */
        public function getResource() {}

        /**
         * Set sql
         *
         * @param string $sql
         *
         * @return $this Provides a fluent interface
         */
        public function setSql($sql) {}

        /**
         * Get sql
         *
         * @return string
         */
        public function getSql() {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setParameterContainer(\Laminas\Db\Adapter\ParameterContainer $parameterContainer) {}

        /**
         * @return \Laminas\Db\Adapter\ParameterContainer
         */
        public function getParameterContainer() {}

        /**
         * @param string $sql
         *
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function prepare($sql = null) {}

        /**
         * @return bool
         */
        public function isPrepared() {}

        /**
         * @param null|array|\Laminas\Db\Adapter\ParameterContainer $parameters
         *
         * @return Result
         * @throws \Laminas\Db\Adapter\Exception\InvalidQueryException
         */
        public function execute($parameters = null) {}

        /**
         * Bind parameters from container
         */
        protected function bindParametersFromContainer() {}

        /**
         * Perform a deep clone
         *
         * @return void
         */
        public function __clone() {}
    }

    class Result implements \Iterator, \Laminas\Db\Adapter\Driver\ResultInterface
    {
        public const STATEMENT_MODE_SCROLLABLE = 'scrollable';
        public const STATEMENT_MODE_FORWARD    = 'forward';
        /** @var string */
        protected $statementMode = self::STATEMENT_MODE_FORWARD;
        /** @var int */
        protected $fetchMode = \PDO::FETCH_ASSOC;
        /**
         * @internal
         *
         * @var array
         */
        public const VALID_FETCH_MODES = [
            \PDO::FETCH_LAZY,
            // 1
            \PDO::FETCH_ASSOC,
            // 2
            \PDO::FETCH_NUM,
            // 3
            \PDO::FETCH_BOTH,
            // 4
            \PDO::FETCH_OBJ,
            // 5
            \PDO::FETCH_BOUND,
            // 6
            // \PDO::FETCH_COLUMN,  // 7 (not a valid fetch mode)
            \PDO::FETCH_CLASS,
            // 8
            \PDO::FETCH_INTO,
            // 9
            \PDO::FETCH_FUNC,
            // 10
            \PDO::FETCH_NAMED,
            // 11
            \PDO::FETCH_KEY_PAIR,
            // 12
            \PDO::FETCH_PROPS_LATE,
            // Extra option for \PDO::FETCH_CLASS
            // \PDO::FETCH_SERIALIZE, // Seems to have been removed
            // \PDO::FETCH_UNIQUE,    // Option for fetchAll
            \PDO::FETCH_CLASSTYPE,
        ];
        /** @var \PDOStatement */
        protected $resource;
        /** @var array Result options */
        protected $options;
        /**
         * Is the current complete?
         *
         * @var bool
         */
        protected $currentComplete = false;
        /**
         * Track current item in recordset
         *
         * @var mixed
         */
        protected $currentData;
        /**
         * Current position of scrollable statement
         *
         * @var int
         */
        protected $position = -1;
        /** @var mixed */
        protected $generatedValue;
        /** @var null */
        protected $rowCount;

        /**
         * Initialize
         *
         * @param mixed $generatedValue
         * @param int   $rowCount
         *
         * @return $this Provides a fluent interface
         */
        public function initialize(\PDOStatement $resource, $generatedValue, $rowCount = null) {}

        /**
         * @return void
         */
        public function buffer() {}

        /**
         * @return bool|null
         */
        public function isBuffered() {}

        /**
         * @param int $fetchMode
         *
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException On invalid fetch mode.
         */
        public function setFetchMode($fetchMode) {}

        /**
         * @return int
         */
        public function getFetchMode() {}

        /**
         * Get resource
         *
         * @return mixed
         */
        public function getResource() {}

        /**
         * Get the data
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function current() {}

        /**
         * Next
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function next() {}

        /**
         * Key
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function key() {}

        /**
         * @return void
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        #[\ReturnTypeWillChange]
        public function rewind() {}

        /**
         * Valid
         *
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function valid() {}

        /**
         * Count
         *
         * @return int
         */
        #[\ReturnTypeWillChange]
        public function count() {}

        /**
         * @return int
         */
        public function getFieldCount() {}

        /**
         * Is query result
         *
         * @return bool
         */
        public function isQueryResult() {}

        /**
         * Get affected rows
         *
         * @return int
         */
        public function getAffectedRows() {}

        /**
         * @return mixed|null
         */
        public function getGeneratedValue() {}
    }

    class Connection extends \Laminas\Db\Adapter\Driver\AbstractConnection
    {
        /** @var Pdo */
        protected $driver;
        /** @var \PDO */
        protected $resource;
        /** @var string */
        protected $dsn;

        /**
         * Constructor
         *
         * @param array|\PDO|null $connectionParameters
         *
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function __construct($connectionParameters = null) {}

        /**
         * Set driver
         *
         * @return $this Provides a fluent interface
         */
        public function setDriver(\Laminas\Db\Adapter\Driver\Pdo\Pdo $driver) {}

        /**
         * {@inheritDoc}
         */
        public function setConnectionParameters(array $connectionParameters) {}

        /**
         * Get the dsn string for this connection
         *
         * @return string
         * @throws \Laminas\Db\Adapter\Exception\RunTimeException
         */
        public function getDsn() {}

        /**
         * {@inheritDoc}
         */
        public function getCurrentSchema() {}

        /**
         * Set resource
         *
         * @return $this Provides a fluent interface
         */
        public function setResource(\PDO $resource) {}

        /**
         * {@inheritDoc}
         *
         * @throws \Laminas\Db\Adapter\Exception\InvalidConnectionParametersException
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function connect() {}

        /**
         * {@inheritDoc}
         */
        public function isConnected() {}

        /**
         * {@inheritDoc}
         */
        public function beginTransaction() {}

        /**
         * {@inheritDoc}
         */
        public function commit() {}

        /**
         * {@inheritDoc}
         *
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function rollback() {}

        /**
         * {@inheritDoc}
         *
         * @throws \Laminas\Db\Adapter\Exception\InvalidQueryException
         */
        public function execute($sql) {}

        /**
         * Prepare
         *
         * @param string $sql
         *
         * @return Statement
         */
        public function prepare($sql) {}

        /**
         * {@inheritDoc}
         *
         * @param string $name
         *
         * @return string|null|false
         */
        public function getLastGeneratedValue($name = null) {}
    }

    class Pdo implements \Laminas\Db\Adapter\Driver\DriverInterface, \Laminas\Db\Adapter\Driver\Feature\DriverFeatureInterface, \Laminas\Db\Adapter\Profiler\ProfilerAwareInterface
    {
        /**
         * @const
         */
        public const FEATURES_DEFAULT = 'default';
        /** @var Connection */
        protected $connection;
        /** @var Statement */
        protected $statementPrototype;
        /** @var Result */
        protected $resultPrototype;
        /** @var array */
        protected $features = [];
        /**
         * @internal
         *
         * @var \Laminas\Db\Adapter\Profiler\ProfilerInterface
         */
        public $profiler;

        /**
         * @param array|Connection|\PDO $connection
         * @param string                $features
         */
        public function __construct($connection, ?\Laminas\Db\Adapter\Driver\Pdo\Statement $statementPrototype = null, ?\Laminas\Db\Adapter\Driver\Pdo\Result $resultPrototype = null, $features = self::FEATURES_DEFAULT) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setProfiler(\Laminas\Db\Adapter\Profiler\ProfilerInterface $profiler) {}

        /**
         * @return null|\Laminas\Db\Adapter\Profiler\ProfilerInterface
         */
        public function getProfiler() {}

        /**
         * Register connection
         *
         * @return $this Provides a fluent interface
         */
        public function registerConnection(\Laminas\Db\Adapter\Driver\Pdo\Connection $connection) {}

        /**
         * Register statement prototype
         */
        public function registerStatementPrototype(\Laminas\Db\Adapter\Driver\Pdo\Statement $statementPrototype) {}

        /**
         * Register result prototype
         */
        public function registerResultPrototype(\Laminas\Db\Adapter\Driver\Pdo\Result $resultPrototype) {}

        /**
         * Add feature
         *
         * @param string                                             $name
         * @param \Laminas\Db\Adapter\Driver\Feature\AbstractFeature $feature
         *
         * @return $this Provides a fluent interface
         */
        public function addFeature($name, $feature) {}

        /**
         * Setup the default features for Pdo
         *
         * @return $this Provides a fluent interface
         */
        public function setupDefaultFeatures() {}

        /**
         * Get feature
         *
         * @param string $name
         *
         * @return \Laminas\Db\Adapter\Driver\Feature\AbstractFeature|false
         */
        public function getFeature($name) {}

        /**
         * Get database platform name
         *
         * @param string $nameFormat
         *
         * @return string
         */
        public function getDatabasePlatformName($nameFormat = self::NAME_FORMAT_CAMELCASE) {}

        /**
         * Check environment
         */
        public function checkEnvironment() {}

        /**
         * @return Connection
         */
        public function getConnection() {}

        /**
         * @param string|\PDOStatement $sqlOrResource
         *
         * @return Statement
         */
        public function createStatement($sqlOrResource = null) {}

        /**
         * @param resource $resource
         * @param mixed    $context
         *
         * @return Result
         */
        public function createResult($resource, $context = null) {}

        /**
         * @return Result
         */
        public function getResultPrototype() {}

        /**
         * @return string
         */
        public function getPrepareType() {}

        /**
         * @param string      $name
         * @param string|null $type
         *
         * @return string
         */
        public function formatParameterName($name, $type = null) {}

        /**
         * @param string|null $name
         *
         * @return string|null|false
         */
        public function getLastGeneratedValue($name = null) {}
    }
}

namespace Laminas\Db\Adapter\Driver\Feature {
    abstract class AbstractFeature
    {
        /** @var \Laminas\Db\Adapter\Driver\DriverInterface */
        protected $driver;

        /**
         * Set driver
         *
         * @return void
         */
        public function setDriver(\Laminas\Db\Adapter\Driver\DriverInterface $driver) {}

        /**
         * Get name
         *
         * @return string
         */
        public abstract function getName();
    }

    interface DriverFeatureInterface
    {
        /**
         * Setup the default features for Pdo
         *
         * @return DriverFeatureInterface
         */
        public function setupDefaultFeatures();

        /**
         * Add feature
         *
         * @param string $name
         * @param mixed  $feature
         *
         * @return DriverFeatureInterface
         */
        public function addFeature($name, $feature);

        /**
         * Get feature
         *
         * @param string $name
         *
         * @return mixed|false
         */
        public function getFeature($name);
    }
}

namespace Laminas\Db\Adapter\Driver\Pdo\Feature {
    /**
     * OracleRowCounter
     */
    class OracleRowCounter extends \Laminas\Db\Adapter\Driver\Feature\AbstractFeature
    {
        /**
         * @return string
         */
        public function getName() {}

        /**
         * @return int
         */
        public function getCountForStatement(\Laminas\Db\Adapter\Driver\Pdo\Statement $statement) {}

        /**
         * @param string $sql
         *
         * @return null|int
         */
        public function getCountForSql($sql) {}

        /**
         * @param \Laminas\Db\Adapter\Driver\Pdo\Statement|string $context
         *
         * @return Closure
         */
        public function getRowCountClosure($context) {}
    }

    /**
     * SqliteRowCounter
     */
    class SqliteRowCounter extends \Laminas\Db\Adapter\Driver\Feature\AbstractFeature
    {
        /**
         * @return string
         */
        public function getName() {}

        /**
         * @return int
         */
        public function getCountForStatement(\Laminas\Db\Adapter\Driver\Pdo\Statement $statement) {}

        /**
         * @param string $sql
         *
         * @return null|int
         */
        public function getCountForSql($sql) {}

        /**
         * @param \Laminas\Db\Adapter\Driver\Pdo\Statement|string $context
         *
         * @return Closure
         */
        public function getRowCountClosure($context) {}
    }
}

namespace Laminas\Db\Adapter\Driver\Mysqli {
    class Statement implements \Laminas\Db\Adapter\Driver\StatementInterface, \Laminas\Db\Adapter\Profiler\ProfilerAwareInterface
    {
        /** @var \mysqli */
        protected $mysqli;
        /** @var Mysqli */
        protected $driver;
        /** @var \Laminas\Db\Adapter\Profiler\ProfilerInterface */
        protected $profiler;
        /** @var string */
        protected $sql = '';
        /**
         * Parameter container
         *
         * @var \Laminas\Db\Adapter\ParameterContainer
         */
        protected $parameterContainer;
        /** @var \mysqli_stmt */
        protected $resource;
        /**
         * Is prepared
         *
         * @var bool
         */
        protected $isPrepared = false;
        /** @var bool */
        protected $bufferResults = false;

        /**
         * @param bool $bufferResults
         */
        public function __construct($bufferResults = false) {}

        /**
         * Set driver
         *
         * @return $this Provides a fluent interface
         */
        public function setDriver(\Laminas\Db\Adapter\Driver\Mysqli\Mysqli $driver) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setProfiler(\Laminas\Db\Adapter\Profiler\ProfilerInterface $profiler) {}

        /**
         * @return null|\Laminas\Db\Adapter\Profiler\ProfilerInterface
         */
        public function getProfiler() {}

        /**
         * Initialize
         *
         * @return $this Provides a fluent interface
         */
        public function initialize(\mysqli $mysqli) {}

        /**
         * Set sql
         *
         * @param string $sql
         *
         * @return $this Provides a fluent interface
         */
        public function setSql($sql) {}

        /**
         * Set Parameter container
         *
         * @return $this Provides a fluent interface
         */
        public function setParameterContainer(\Laminas\Db\Adapter\ParameterContainer $parameterContainer) {}

        /**
         * Get resource
         *
         * @return mixed
         */
        public function getResource() {}

        /**
         * Set resource
         *
         * @return $this Provides a fluent interface
         */
        public function setResource(\mysqli_stmt $mysqliStatement) {}

        /**
         * Get sql
         *
         * @return string
         */
        public function getSql() {}

        /**
         * Get parameter count
         *
         * @return \Laminas\Db\Adapter\ParameterContainer
         */
        public function getParameterContainer() {}

        /**
         * Is prepared
         *
         * @return bool
         */
        public function isPrepared() {}

        /**
         * Prepare
         *
         * @param string $sql
         *
         * @return $this Provides a fluent interface
         * @throws \Laminas\Db\Adapter\Exception\InvalidQueryException
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function prepare($sql = null) {}

        /**
         * Execute
         *
         * @param null|array|\Laminas\Db\Adapter\ParameterContainer $parameters
         *
         * @return mixed
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function execute($parameters = null) {}

        /**
         * Bind parameters from container
         *
         * @return void
         */
        protected function bindParametersFromContainer() {}
    }

    class Result implements \Iterator, \Laminas\Db\Adapter\Driver\ResultInterface
    {
        /** @var \mysqli|\mysqli_result|\mysqli_stmt */
        protected $resource;
        /** @var bool */
        protected $isBuffered;
        /**
         * Cursor position
         *
         * @var int
         */
        protected $position = 0;
        /**
         * Number of known rows
         *
         * @var int
         */
        protected $numberOfRows = -1;
        /**
         * Is the current() operation already complete for this pointer position?
         *
         * @var bool
         */
        protected $currentComplete = false;
        /** @var bool */
        protected $nextComplete = false;
        /** @var mixed */
        protected $currentData;
        /** @var array */
        protected $statementBindValues = ['keys' => null, 'values' => []];
        /** @var mixed */
        protected $generatedValue;

        /**
         * Initialize
         *
         * @param mixed     $resource
         * @param mixed     $generatedValue
         * @param bool|null $isBuffered
         *
         * @return $this Provides a fluent interface
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function initialize($resource, $generatedValue, $isBuffered = null) {}

        /**
         * Force buffering
         *
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function buffer() {}

        /**
         * Check if is buffered
         *
         * @return bool|null
         */
        public function isBuffered() {}

        /**
         * Return the resource
         *
         * @return mixed
         */
        public function getResource() {}

        /**
         * Is query result?
         *
         * @return bool
         */
        public function isQueryResult() {}

        /**
         * Get affected rows
         *
         * @return int
         */
        public function getAffectedRows() {}

        /**
         * Current
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function current() {}

        /**
         * Mysqli's binding and returning of statement values
         *
         * Mysqli requires you to bind variables to the extension in order to
         * get data out.  These values have to be references:
         *
         * @see http://php.net/manual/en/mysqli-stmt.bind-result.php
         *
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         * @return bool
         */
        protected function loadDataFromMysqliStatement() {}

        /**
         * Load from mysqli result
         *
         * @return bool
         */
        protected function loadFromMysqliResult() {}

        /**
         * Next
         *
         * @return void
         */
        #[\ReturnTypeWillChange]
        public function next() {}

        /**
         * Key
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function key() {}

        /**
         * Rewind
         *
         * @return void
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        #[\ReturnTypeWillChange]
        public function rewind() {}

        /**
         * Valid
         *
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function valid() {}

        /**
         * Count
         *
         * @return int
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        #[\ReturnTypeWillChange]
        public function count() {}

        /**
         * Get field count
         *
         * @return int
         */
        public function getFieldCount() {}

        /**
         * Get generated value
         *
         * @return mixed|null
         */
        public function getGeneratedValue() {}
    }

    class Mysqli implements \Laminas\Db\Adapter\Driver\DriverInterface, \Laminas\Db\Adapter\Profiler\ProfilerAwareInterface
    {
        /** @var Connection */
        protected $connection;
        /** @var Statement */
        protected $statementPrototype;
        /** @var Result */
        protected $resultPrototype;
        /** @var \Laminas\Db\Adapter\Profiler\ProfilerInterface */
        protected $profiler;
        /** @var array */
        protected $options = ['buffer_results' => false];

        /**
         * Constructor
         *
         * @param array|Connection|\mysqli $connection
         * @param array                    $options
         */
        public function __construct($connection, ?\Laminas\Db\Adapter\Driver\Mysqli\Statement $statementPrototype = null, ?\Laminas\Db\Adapter\Driver\Mysqli\Result $resultPrototype = null, array $options = []) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setProfiler(\Laminas\Db\Adapter\Profiler\ProfilerInterface $profiler) {}

        /**
         * @return null|\Laminas\Db\Adapter\Profiler\ProfilerInterface
         */
        public function getProfiler() {}

        /**
         * Register connection
         *
         * @return $this Provides a fluent interface
         */
        public function registerConnection(\Laminas\Db\Adapter\Driver\Mysqli\Connection $connection) {}

        /**
         * Register statement prototype
         */
        public function registerStatementPrototype(\Laminas\Db\Adapter\Driver\Mysqli\Statement $statementPrototype) {}

        /**
         * Get statement prototype
         *
         * @return null|Statement
         */
        public function getStatementPrototype() {}

        /**
         * Register result prototype
         */
        public function registerResultPrototype(\Laminas\Db\Adapter\Driver\Mysqli\Result $resultPrototype) {}

        /**
         * @return null|Result
         */
        public function getResultPrototype() {}

        /**
         * Get database platform name
         *
         * @param string $nameFormat
         *
         * @return string
         */
        public function getDatabasePlatformName($nameFormat = self::NAME_FORMAT_CAMELCASE) {}

        /**
         * Check environment
         *
         * @return void
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function checkEnvironment() {}

        /**
         * Get connection
         *
         * @return Connection
         */
        public function getConnection() {}

        /**
         * Create statement
         *
         * @param string $sqlOrResource
         *
         * @return Statement
         */
        public function createStatement($sqlOrResource = null) {}

        /**
         * Create result
         *
         * @param resource  $resource
         * @param null|bool $isBuffered
         *
         * @return Result
         */
        public function createResult($resource, $isBuffered = null) {}

        /**
         * Get prepare type
         *
         * @return string
         */
        public function getPrepareType() {}

        /**
         * Format parameter name
         *
         * @param string $name
         * @param mixed  $type
         *
         * @return string
         */
        public function formatParameterName($name, $type = null) {}

        /**
         * Get last generated value
         *
         * @return mixed
         */
        public function getLastGeneratedValue() {}
    }

    class Connection extends \Laminas\Db\Adapter\Driver\AbstractConnection
    {
        /** @var Mysqli */
        protected $driver;
        /** @var \mysqli */
        protected $resource;

        /**
         * Constructor
         *
         * @param array|\mysqli|null $connectionInfo
         *
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function __construct($connectionInfo = null) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setDriver(\Laminas\Db\Adapter\Driver\Mysqli\Mysqli $driver) {}

        /**
         * {@inheritDoc}
         */
        public function getCurrentSchema() {}

        /**
         * Set resource
         *
         * @return $this Provides a fluent interface
         */
        public function setResource(\mysqli $resource) {}

        /**
         * {@inheritDoc}
         */
        public function connect() {}

        /**
         * {@inheritDoc}
         */
        public function isConnected() {}

        /**
         * {@inheritDoc}
         */
        public function disconnect() {}

        /**
         * {@inheritDoc}
         */
        public function beginTransaction() {}

        /**
         * {@inheritDoc}
         */
        public function commit() {}

        /**
         * {@inheritDoc}
         */
        public function rollback() {}

        /**
         * {@inheritDoc}
         *
         * @throws \Laminas\Db\Adapter\Exception\InvalidQueryException
         */
        public function execute($sql) {}

        /**
         * {@inheritDoc}
         */
        public function getLastGeneratedValue($name = null) {}

        /**
         * Create a new mysqli resource
         *
         * @return \mysqli
         */
        protected function createResource() {}
    }
}

namespace Laminas\Db\Adapter\Driver\Oci8 {
    class Oci8 implements \Laminas\Db\Adapter\Driver\DriverInterface, \Laminas\Db\Adapter\Profiler\ProfilerAwareInterface
    {
        public const FEATURES_DEFAULT = 'default';
        /** @var Connection */
        protected $connection;
        /** @var Statement */
        protected $statementPrototype;
        /** @var Result */
        protected $resultPrototype;
        /** @var \Laminas\Db\Adapter\Profiler\ProfilerInterface */
        protected $profiler;
        /** @var array */
        protected $options = [];
        /** @var array */
        protected $features = [];

        /**
         * @param array|Connection|\oci8 $connection
         * @param array                  $options
         * @param string                 $features
         */
        public function __construct($connection, ?\Laminas\Db\Adapter\Driver\Oci8\Statement $statementPrototype = null, ?\Laminas\Db\Adapter\Driver\Oci8\Result $resultPrototype = null, array $options = [], $features = self::FEATURES_DEFAULT) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setProfiler(\Laminas\Db\Adapter\Profiler\ProfilerInterface $profiler) {}

        /**
         * @return null|\Laminas\Db\Adapter\Profiler\ProfilerInterface
         */
        public function getProfiler() {}

        /**
         * Register connection
         *
         * @return $this Provides a fluent interface
         */
        public function registerConnection(\Laminas\Db\Adapter\Driver\Oci8\Connection $connection) {}

        /**
         * Register statement prototype
         *
         * @return $this Provides a fluent interface
         */
        public function registerStatementPrototype(\Laminas\Db\Adapter\Driver\Oci8\Statement $statementPrototype) {}

        /**
         * @return null|Statement
         */
        public function getStatementPrototype() {}

        /**
         * Register result prototype
         *
         * @return $this Provides a fluent interface
         */
        public function registerResultPrototype(\Laminas\Db\Adapter\Driver\Oci8\Result $resultPrototype) {}

        /**
         * @return null|Result
         */
        public function getResultPrototype() {}

        /**
         * Add feature
         *
         * @param string                                             $name
         * @param \Laminas\Db\Adapter\Driver\Feature\AbstractFeature $feature
         *
         * @return $this Provides a fluent interface
         */
        public function addFeature($name, $feature) {}

        /**
         * Setup the default features for Pdo
         *
         * @return $this Provides a fluent interface
         */
        public function setupDefaultFeatures() {}

        /**
         * Get feature
         *
         * @param string $name
         *
         * @return \Laminas\Db\Adapter\Driver\Feature\AbstractFeature|false
         */
        public function getFeature($name) {}

        /**
         * Get database platform name
         *
         * @param string $nameFormat
         *
         * @return string
         */
        public function getDatabasePlatformName($nameFormat = self::NAME_FORMAT_CAMELCASE) {}

        /**
         * Check environment
         */
        public function checkEnvironment() {}

        /**
         * @return Connection
         */
        public function getConnection() {}

        /**
         * @param string $sqlOrResource
         *
         * @return Statement
         */
        public function createStatement($sqlOrResource = null) {}

        /**
         * @param resource $resource
         * @param null     $context
         *
         * @return Result
         */
        public function createResult($resource, $context = null) {}

        /**
         * @return string
         */
        public function getPrepareType() {}

        /**
         * @param string $name
         * @param mixed  $type
         *
         * @return string
         */
        public function formatParameterName($name, $type = null) {}

        /**
         * @return mixed
         */
        public function getLastGeneratedValue() {}
    }

    class Statement implements \Laminas\Db\Adapter\Driver\StatementInterface, \Laminas\Db\Adapter\Profiler\ProfilerAwareInterface
    {
        /** @var resource */
        protected $oci8;
        /** @var Oci8 */
        protected $driver;
        /** @var \Laminas\Db\Adapter\Profiler\ProfilerInterface */
        protected $profiler;
        /** @var string */
        protected $sql = '';
        /**
         * Parameter container
         *
         * @var \Laminas\Db\Adapter\ParameterContainer
         */
        protected $parameterContainer;
        /** @var resource */
        protected $resource;
        /**
         * @internal
         * @deprecated
         *
         * @var bool
         */
        public $parametersBound;
        /**
         * Is prepared
         *
         * @var bool
         */
        protected $isPrepared = false;
        /** @var bool */
        protected $bufferResults = false;

        /**
         * Set driver
         *
         * @param Oci8 $driver
         *
         * @return $this Provides a fluent interface
         */
        public function setDriver($driver) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setProfiler(\Laminas\Db\Adapter\Profiler\ProfilerInterface $profiler) {}

        /**
         * @return null|\Laminas\Db\Adapter\Profiler\ProfilerInterface
         */
        public function getProfiler() {}

        /**
         * Initialize
         *
         * @param resource $oci8
         *
         * @return $this Provides a fluent interface
         */
        public function initialize($oci8) {}

        /**
         * Set sql
         *
         * @param string $sql
         *
         * @return $this Provides a fluent interface
         */
        public function setSql($sql) {}

        /**
         * Set Parameter container
         *
         * @return $this Provides a fluent interface
         */
        public function setParameterContainer(\Laminas\Db\Adapter\ParameterContainer $parameterContainer) {}

        /**
         * Get resource
         *
         * @return mixed
         */
        public function getResource() {}

        /**
         * Set resource
         *
         * @param resource $oci8Statement
         *
         * @return $this Provides a fluent interface
         */
        public function setResource($oci8Statement) {}

        /**
         * Get sql
         *
         * @return string
         */
        public function getSql() {}

        /**
         * @return \Laminas\Db\Adapter\ParameterContainer
         */
        public function getParameterContainer() {}

        /**
         * @return bool
         */
        public function isPrepared() {}

        /**
         * @param string $sql
         *
         * @return $this Provides a fluent interface
         */
        public function prepare($sql = null) {}

        /**
         * Execute
         *
         * @param null|array|\Laminas\Db\Adapter\ParameterContainer $parameters
         *
         * @return mixed
         */
        public function execute($parameters = null) {}

        /**
         * Bind parameters from container
         */
        protected function bindParametersFromContainer() {}

        /**
         * Perform a deep clone
         */
        public function __clone() {}
    }

    class Result implements \Iterator, \Laminas\Db\Adapter\Driver\ResultInterface
    {
        /** @var resource */
        protected $resource;
        /** @var null|int */
        protected $rowCount;
        /**
         * Cursor position
         *
         * @var int
         */
        protected $position = 0;
        /**
         * Number of known rows
         *
         * @var int
         */
        protected $numberOfRows = -1;
        /**
         * Is the current() operation already complete for this pointer position?
         *
         * @var bool
         */
        protected $currentComplete = false;
        /** @var bool|array */
        protected $currentData = false;
        /** @var array */
        protected $statementBindValues = ['keys' => null, 'values' => []];
        /** @var mixed */
        protected $generatedValue;

        /**
         * Initialize
         *
         * @param resource $resource
         * @param null|int $generatedValue
         * @param null|int $rowCount
         *
         * @return $this Provides a fluent interface
         */
        public function initialize($resource, $generatedValue = null, $rowCount = null) {}

        /**
         * Force buffering at driver level
         *
         * Oracle does not support this, to my knowledge (@ralphschindler)
         *
         * @return null
         */
        public function buffer() {}

        /**
         * Is the result buffered?
         *
         * @return bool
         */
        public function isBuffered() {}

        /**
         * Return the resource
         *
         * @return mixed
         */
        public function getResource() {}

        /**
         * Is query result?
         *
         * @return bool
         */
        public function isQueryResult() {}

        /**
         * Get affected rows
         *
         * @return int
         */
        public function getAffectedRows() {}

        /** @return mixed */
        #[\ReturnTypeWillChange]
        public function current() {}

        /**
         * Load from oci8 result
         *
         * @return bool
         */
        protected function loadData() {}

        /** @return void */
        #[\ReturnTypeWillChange]
        public function next() {}

        /** @return int|string */
        #[\ReturnTypeWillChange]
        public function key() {}

        /** @return void */
        #[\ReturnTypeWillChange]
        public function rewind() {}

        /** @return bool */
        #[\ReturnTypeWillChange]
        public function valid() {}

        /** @return int */
        #[\ReturnTypeWillChange]
        public function count() {}

        /**
         * @return int
         */
        public function getFieldCount() {}

        /**
         * @return null
         * @todo OCI8 generated value in Driver Result
         */
        public function getGeneratedValue() {}
    }

    class Connection extends \Laminas\Db\Adapter\Driver\AbstractConnection
    {
        /** @var Oci8 */
        protected $driver;

        /**
         * Constructor
         *
         * @param array|resource|null $connectionInfo
         *
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function __construct($connectionInfo = null) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setDriver(\Laminas\Db\Adapter\Driver\Oci8\Oci8 $driver) {}

        /**
         * {@inheritDoc}
         */
        public function getCurrentSchema() {}

        /**
         * Set resource
         *
         * @param resource $resource
         *
         * @return $this Provides a fluent interface
         */
        public function setResource($resource) {}

        /**
         * {@inheritDoc}
         */
        public function connect() {}

        /**
         * {@inheritDoc}
         */
        public function isConnected() {}

        /**
         * {@inheritDoc}
         */
        public function disconnect() {}

        /**
         * {@inheritDoc}
         */
        public function beginTransaction() {}

        /**
         * {@inheritDoc}
         */
        public function commit() {}

        /**
         * {@inheritDoc}
         */
        public function rollback() {}

        /**
         * {@inheritDoc}
         */
        public function execute($sql) {}

        /**
         * @todo Get Last Generated Value in Connection (this might not apply)
         * {@inheritDoc}
         */
        public function getLastGeneratedValue($name = null) {}
    }
}

namespace Laminas\Db\Adapter\Driver\Oci8\Feature {
    /**
     * Class for count of results of a select
     */
    class RowCounter extends \Laminas\Db\Adapter\Driver\Feature\AbstractFeature
    {
        /**
         * @return string
         */
        public function getName() {}

        /**
         * @return null|int
         */
        public function getCountForStatement(\Laminas\Db\Adapter\Driver\Oci8\Statement $statement) {}

        /**
         * @param string $sql
         *
         * @return null|int
         */
        public function getCountForSql($sql) {}

        /**
         * @param \Laminas\Db\Adapter\Driver\Oci8\Statement|string $context
         *
         * @return callable
         */
        public function getRowCountClosure($context) {}
    }
}

namespace Laminas\Db\Adapter\Driver\Pgsql {
    class Pgsql implements \Laminas\Db\Adapter\Driver\DriverInterface, \Laminas\Db\Adapter\Profiler\ProfilerAwareInterface
    {
        /** @var Connection */
        protected $connection;
        /** @var Statement */
        protected $statementPrototype;
        /** @var Result */
        protected $resultPrototype;
        /** @var null|\Laminas\Db\Adapter\Profiler\ProfilerInterface */
        protected $profiler;
        /** @var array */
        protected $options = ['buffer_results' => false];

        /**
         * Constructor
         *
         * @param array|Connection|resource $connection
         * @param array                     $options
         */
        public function __construct($connection, ?\Laminas\Db\Adapter\Driver\Pgsql\Statement $statementPrototype = null, ?\Laminas\Db\Adapter\Driver\Pgsql\Result $resultPrototype = null, $options = null) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setProfiler(\Laminas\Db\Adapter\Profiler\ProfilerInterface $profiler) {}

        /**
         * @return null|\Laminas\Db\Adapter\Profiler\ProfilerInterface
         */
        public function getProfiler() {}

        /**
         * Register connection
         *
         * @return $this Provides a fluent interface
         */
        public function registerConnection(\Laminas\Db\Adapter\Driver\Pgsql\Connection $connection) {}

        /**
         * Register statement prototype
         *
         * @return $this Provides a fluent interface
         */
        public function registerStatementPrototype(\Laminas\Db\Adapter\Driver\Pgsql\Statement $statement) {}

        /**
         * Register result prototype
         *
         * @return $this Provides a fluent interface
         */
        public function registerResultPrototype(\Laminas\Db\Adapter\Driver\Pgsql\Result $result) {}

        /**
         * Get database platform name
         *
         * @param string $nameFormat
         *
         * @return string
         */
        public function getDatabasePlatformName($nameFormat = self::NAME_FORMAT_CAMELCASE) {}

        /**
         * Check environment
         *
         * @return void
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function checkEnvironment() {}

        /**
         * Get connection
         *
         * @return Connection
         */
        public function getConnection() {}

        /**
         * Create statement
         *
         * @param string|null $sqlOrResource
         *
         * @return Statement
         */
        public function createStatement($sqlOrResource = null) {}

        /**
         * Create result
         *
         * @param resource $resource
         *
         * @return Result
         */
        public function createResult($resource) {}

        /**
         * @return Result
         */
        public function getResultPrototype() {}

        /**
         * Get prepare Type
         *
         * @return string
         */
        public function getPrepareType() {}

        /**
         * Format parameter name
         *
         * @param string $name
         * @param mixed  $type
         *
         * @return string
         */
        public function formatParameterName($name, $type = null) {}

        /**
         * Get last generated value
         *
         * @param string $name
         *
         * @return mixed
         */
        public function getLastGeneratedValue($name = null) {}
    }

    class Statement implements \Laminas\Db\Adapter\Driver\StatementInterface, \Laminas\Db\Adapter\Profiler\ProfilerAwareInterface
    {
        /** @var int */
        protected static $statementIndex = 0;
        /** @var string */
        protected $statementName = '';
        /** @var Pgsql */
        protected $driver;
        /** @var \Laminas\Db\Adapter\Profiler\ProfilerInterface */
        protected $profiler;
        /** @var resource */
        protected $pgsql;
        /** @var resource */
        protected $resource;
        /** @var string */
        protected $sql;
        /** @var \Laminas\Db\Adapter\ParameterContainer */
        protected $parameterContainer;

        /**
         * @return $this Provides a fluent interface
         */
        public function setDriver(\Laminas\Db\Adapter\Driver\Pgsql\Pgsql $driver) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setProfiler(\Laminas\Db\Adapter\Profiler\ProfilerInterface $profiler) {}

        /**
         * @return null|\Laminas\Db\Adapter\Profiler\ProfilerInterface
         */
        public function getProfiler() {}

        /**
         * Initialize
         *
         * @param resource $pgsql
         *
         * @return void
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException For invalid or missing postgresql connection.
         */
        public function initialize($pgsql) {}

        /**
         * Get resource
         *
         * @return resource
         * @todo Implement this method
         *       phpcs:ignore Squiz.Commenting.FunctionComment.InvalidNoReturn
         */
        public function getResource() {}

        /**
         * Set sql
         *
         * @param string $sql
         *
         * @return $this Provides a fluent interface
         */
        public function setSql($sql) {}

        /**
         * Get sql
         *
         * @return string
         */
        public function getSql() {}

        /**
         * Set parameter container
         *
         * @return $this Provides a fluent interface
         */
        public function setParameterContainer(\Laminas\Db\Adapter\ParameterContainer $parameterContainer) {}

        /**
         * Get parameter container
         *
         * @return \Laminas\Db\Adapter\ParameterContainer
         */
        public function getParameterContainer() {}

        /**
         * Prepare
         *
         * @param string $sql
         */
        public function prepare($sql = null) {}

        /**
         * Is prepared
         *
         * @return bool
         */
        public function isPrepared() {}

        /**
         * Execute
         *
         * @param null|array|\Laminas\Db\Adapter\ParameterContainer $parameters
         *
         * @return Result
         * @throws \Laminas\Db\Adapter\Exception\InvalidQueryException
         */
        public function execute($parameters = null) {}
    }

    class Result implements \Laminas\Db\Adapter\Driver\ResultInterface
    {
        /** @var resource */
        protected $resource;
        /** @var int */
        protected $position = 0;
        /** @var int */
        protected $count = 0;
        /** @var null|mixed */
        protected $generatedValue;

        /**
         * Initialize
         *
         * @param resource   $resource
         * @param int|string $generatedValue
         *
         * @return void
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function initialize($resource, $generatedValue) {}

        /**
         * Current
         *
         * @return array|bool|mixed
         */
        #[\ReturnTypeWillChange]
        public function current() {}

        /**
         * Next
         *
         * @return void
         */
        #[\ReturnTypeWillChange]
        public function next() {}

        /**
         * Key
         *
         * @return int|mixed
         */
        #[\ReturnTypeWillChange]
        public function key() {}

        /**
         * Valid
         *
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function valid() {}

        /**
         * Rewind
         *
         * @return void
         */
        #[\ReturnTypeWillChange]
        public function rewind() {}

        /**
         * Buffer
         *
         * @return null
         */
        public function buffer() {}

        /**
         * Is buffered
         *
         * @return false
         */
        public function isBuffered() {}

        /**
         * Is query result
         *
         * @return bool
         */
        public function isQueryResult() {}

        /**
         * Get affected rows
         *
         * @return int
         */
        public function getAffectedRows() {}

        /**
         * Get generated value
         *
         * @return mixed|null
         */
        public function getGeneratedValue() {}

        /**
         * Get resource
         */
        public function getResource() {}

        /**
         * Count
         *
         * @return int The custom count as an integer.
         */
        #[\ReturnTypeWillChange]
        public function count() {}

        /**
         * Get field count
         *
         * @return int
         */
        public function getFieldCount() {}
    }

    class Connection extends \Laminas\Db\Adapter\Driver\AbstractConnection
    {
        /** @var Pgsql */
        protected $driver;
        /** @var resource */
        protected $resource;
        /** @var null|int PostgreSQL connection type */
        protected $type;

        /**
         * Constructor
         *
         * @param resource|array|null $connectionInfo
         */
        public function __construct($connectionInfo = null) {}

        /**
         * Set resource
         *
         * @param resource $resource
         *
         * @return $this Provides a fluent interface
         */
        public function setResource($resource) {}

        /**
         * Set driver
         *
         * @return $this Provides a fluent interface
         */
        public function setDriver(\Laminas\Db\Adapter\Driver\Pgsql\Pgsql $driver) {}

        /**
         * @param int|null $type
         *
         * @return $this Provides a fluent interface
         */
        public function setType($type) {}

        /**
         * {@inheritDoc}
         *
         * @return null|string
         */
        public function getCurrentSchema() {}

        /**
         * {@inheritDoc}
         *
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException On failure.
         */
        public function connect() {}

        /**
         * {@inheritDoc}
         */
        public function isConnected() {}

        /**
         * {@inheritDoc}
         */
        public function disconnect() {}

        /**
         * {@inheritDoc}
         */
        public function beginTransaction() {}

        /**
         * {@inheritDoc}
         */
        public function commit() {}

        /**
         * {@inheritDoc}
         */
        public function rollback() {}

        /**
         * {@inheritDoc}
         *
         * @return resource|\Laminas\Db\ResultSet\ResultSetInterface
         * @throws \Laminas\Db\Adapter\Exception\InvalidQueryException
         */
        public function execute($sql) {}

        /**
         * {@inheritDoc}
         *
         * @return string
         */
        public function getLastGeneratedValue($name = null) {}
    }
}

namespace Laminas\Db\Adapter\Platform {
    interface PlatformInterface
    {
        /**
         * Get name
         *
         * @return string
         */
        public function getName();

        /**
         * Get quote identifier symbol
         *
         * @return string
         */
        public function getQuoteIdentifierSymbol();

        /**
         * Quote identifier
         *
         * @param string $identifier
         *
         * @return string
         */
        public function quoteIdentifier($identifier);

        /**
         * Quote identifier chain
         *
         * @param string|string[] $identifierChain
         *
         * @return string
         */
        public function quoteIdentifierChain($identifierChain);

        /**
         * Get quote value symbol
         *
         * @return string
         */
        public function getQuoteValueSymbol();

        /**
         * Quote value
         *
         * Will throw a notice when used in a workflow that can be considered "unsafe"
         *
         * @param string $value
         *
         * @return string
         */
        public function quoteValue($value);

        /**
         * Quote Trusted Value
         *
         * The ability to quote values without notices
         *
         * @param scalar $value
         *
         * @return string
         */
        public function quoteTrustedValue($value);

        /**
         * Quote value list
         *
         * @param string|string[] $valueList
         *
         * @return string
         */
        public function quoteValueList($valueList);

        /**
         * Get identifier separator
         *
         * @return string
         */
        public function getIdentifierSeparator();

        /**
         * Quote identifier in fragment
         *
         * @param string $identifier
         * @param array  $additionalSafeWords
         *
         * @return string
         */
        public function quoteIdentifierInFragment($identifier, array $additionalSafeWords = []);
    }

    abstract class AbstractPlatform implements \Laminas\Db\Adapter\Platform\PlatformInterface
    {
        /** @var string[] */
        protected $quoteIdentifier = ['"', '"'];
        /** @var string */
        protected $quoteIdentifierTo = '\'';
        /** @var bool */
        protected $quoteIdentifiers = true;
        /** @var string */
        protected $quoteIdentifierFragmentPattern = '/([^0-9,a-z,A-Z$_:])/i';

        /**
         * {@inheritDoc}
         */
        public function quoteIdentifierInFragment($identifier, array $safeWords = []) {}

        /**
         * {@inheritDoc}
         */
        public function quoteIdentifier($identifier) {}

        /**
         * {@inheritDoc}
         */
        public function quoteIdentifierChain($identifierChain) {}

        /**
         * {@inheritDoc}
         */
        public function getQuoteIdentifierSymbol() {}

        /**
         * {@inheritDoc}
         */
        public function getQuoteValueSymbol() {}

        /**
         * {@inheritDoc}
         */
        public function quoteValue($value) {}

        /**
         * {@inheritDoc}
         */
        public function quoteTrustedValue($value) {}

        /**
         * {@inheritDoc}
         */
        public function quoteValueList($valueList) {}

        /**
         * {@inheritDoc}
         */
        public function getIdentifierSeparator() {}
    }

    class Sql92 extends \Laminas\Db\Adapter\Platform\AbstractPlatform
    {
        /**
         * {@inheritDoc}
         */
        public function getName() {}

        /**
         * {@inheritDoc}
         */
        public function quoteValue($value) {}
    }

    class Mysql extends \Laminas\Db\Adapter\Platform\AbstractPlatform
    {
        /**
         * {@inheritDoc}
         */
        protected $quoteIdentifier = ['`', '`'];
        /**
         * {@inheritDoc}
         */
        protected $quoteIdentifierTo = '``';
        /** @var \mysqli|\PDO|\Laminas\Db\Adapter\Driver\Pdo\Pdo|\Laminas\Db\Adapter\Driver\Mysqli\Mysqli */
        protected $driver;
        /**
         * NOTE: Include dashes for MySQL only, need tests for others platforms
         *
         * @var string
         */
        protected $quoteIdentifierFragmentPattern = '/([^0-9,a-z,A-Z$_\\-:])/i';

        /**
         * @param null|\Laminas\Db\Adapter\Driver\Mysqli\Mysqli|\Laminas\Db\Adapter\Driver\Pdo\Pdo|\mysqli|\PDO $driver
         */
        public function __construct($driver = null) {}

        /**
         * @param \Laminas\Db\Adapter\Driver\Mysqli\Mysqli|\Laminas\Db\Adapter\Driver\Pdo\Pdo|\mysqli|\PDO $driver
         *
         * @return $this Provides a fluent interface
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function setDriver($driver) {}

        /**
         * {@inheritDoc}
         */
        public function getName() {}

        /**
         * {@inheritDoc}
         */
        public function quoteIdentifierChain($identifierChain) {}

        /**
         * {@inheritDoc}
         */
        public function quoteValue($value) {}

        /**
         * {@inheritDoc}
         */
        public function quoteTrustedValue($value) {}

        /**
         * @param string $value
         *
         * @return string|null
         */
        protected function quoteViaDriver($value) {}
    }

    class IbmDb2 extends \Laminas\Db\Adapter\Platform\AbstractPlatform
    {
        /** @var string */
        protected $identifierSeparator = '.';

        /**
         * @param array $options
         */
        public function __construct($options = []) {}

        /**
         * {@inheritDoc}
         */
        public function getName() {}

        /**
         * {@inheritDoc}
         */
        public function quoteIdentifierInFragment($identifier, array $safeWords = []) {}

        /**
         * {@inheritDoc}
         */
        public function quoteIdentifierChain($identifierChain) {}

        /**
         * {@inheritDoc}
         */
        public function quoteValue($value) {}

        /**
         * {@inheritDoc}
         */
        public function quoteTrustedValue($value) {}

        /**
         * {@inheritDoc}
         */
        public function getIdentifierSeparator() {}
    }

    class Postgresql extends \Laminas\Db\Adapter\Platform\AbstractPlatform
    {
        /**
         * Overrides value from AbstractPlatform to use proper escaping for Postgres
         *
         * @var string
         */
        protected $quoteIdentifierTo = '""';
        /** @var null|resource|\PDO|\Laminas\Db\Adapter\Driver\Pdo\Pdo|\Laminas\Db\Adapter\Driver\Pgsql\Pgsql */
        protected $driver;

        /**
         * @param null|\Laminas\Db\Adapter\Driver\Pgsql\Pgsql|\Laminas\Db\Adapter\Driver\Pdo\Pdo|resource|\PDO $driver
         */
        public function __construct($driver = null) {}

        /**
         * @param \Laminas\Db\Adapter\Driver\Pgsql\Pgsql|\Laminas\Db\Adapter\Driver\Pdo\Pdo|resource|\PDO $driver
         *
         * @return $this Provides a fluent interface
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function setDriver($driver) {}

        /**
         * {@inheritDoc}
         */
        public function getName() {}

        /**
         * {@inheritDoc}
         */
        public function quoteIdentifierChain($identifierChain) {}

        /**
         * {@inheritDoc}
         */
        public function quoteValue($value) {}

        /**
         * {@inheritDoc}
         *
         * @param scalar $value
         *
         * @return string
         */
        public function quoteTrustedValue($value) {}

        /**
         * @param string $value
         *
         * @return string|null
         */
        protected function quoteViaDriver($value) {}
    }

    class Sqlite extends \Laminas\Db\Adapter\Platform\AbstractPlatform
    {
        /** @var string[] */
        protected $quoteIdentifier = ['"', '"'];
        /**
         * {@inheritDoc}
         */
        protected $quoteIdentifierTo = '\'';
        /** @var \PDO */
        protected $resource;

        /** @param null|\Laminas\Db\Adapter\Driver\Pdo\Pdo|\PDO $driver */
        public function __construct($driver = null) {}

        /**
         * @param \Laminas\Db\Adapter\Driver\Pdo\Pdo|\PDO $driver
         *
         * @return $this Provides a fluent interface
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function setDriver($driver) {}

        /**
         * {@inheritDoc}
         */
        public function getName() {}

        /**
         * {@inheritDoc}
         */
        public function quoteValue($value) {}

        /**
         * {@inheritDoc}
         */
        public function quoteTrustedValue($value) {}
    }

    class SqlServer extends \Laminas\Db\Adapter\Platform\AbstractPlatform
    {
        /**
         * {@inheritDoc}
         */
        protected $quoteIdentifier = ['[', ']'];
        /**
         * {@inheritDoc}
         */
        protected $quoteIdentifierTo = '\\';
        /** @var resource|\PDO */
        protected $resource;

        /**
         * @param null|\Laminas\Db\Adapter\Driver\Sqlsrv\Sqlsrv|\Laminas\Db\Adapter\Driver\Pdo\Pdo|resource|\PDO $driver
         */
        public function __construct($driver = null) {}

        /**
         * @param \Laminas\Db\Adapter\Driver\Sqlsrv\Sqlsrv|\Laminas\Db\Adapter\Driver\Pdo\Pdo|resource|\PDO $driver
         *
         * @return $this Provides a fluent interface
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function setDriver($driver) {}

        /**
         * {@inheritDoc}
         */
        public function getName() {}

        /**
         * {@inheritDoc}
         */
        public function getQuoteIdentifierSymbol() {}

        /**
         * {@inheritDoc}
         */
        public function quoteIdentifierChain($identifierChain) {}

        /**
         * {@inheritDoc}
         */
        public function quoteValue($value) {}

        /**
         * {@inheritDoc}
         */
        public function quoteTrustedValue($value) {}
    }

    class Oracle extends \Laminas\Db\Adapter\Platform\AbstractPlatform
    {
        /** @var null|\Laminas\Db\Adapter\Driver\Pdo\Pdo|\Laminas\Db\Adapter\Driver\Oci8\Oci8|\PDO */
        protected $resource;

        /**
         * @param array                                                                        $options
         * @param null|\Laminas\Db\Adapter\Driver\Oci8\Oci8|\Laminas\Db\Adapter\Driver\Pdo\Pdo $driver
         */
        public function __construct($options = [], $driver = null) {}

        /**
         * @param \Laminas\Db\Adapter\Driver\Pdo\Pdo|\Laminas\Db\Adapter\Driver\Oci8\Oci8 $driver
         *
         * @return $this Provides a fluent interface
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function setDriver($driver) {}

        /**
         * @return null|\Laminas\Db\Adapter\Driver\Pdo\Pdo|\Laminas\Db\Adapter\Driver\Oci8\Oci8
         */
        public function getDriver() {}

        /**
         * {@inheritDoc}
         */
        public function getName() {}

        /**
         * {@inheritDoc}
         */
        public function quoteIdentifierChain($identifierChain) {}

        /**
         * {@inheritDoc}
         */
        public function quoteValue($value) {}

        /**
         * {@inheritDoc}
         */
        public function quoteTrustedValue($value) {}
    }
}

namespace Laminas\Db\TableGateway {
    interface TableGatewayInterface
    {
        /** @return string */
        public function getTable();

        /**
         * @param \Laminas\Db\Sql\Where|Closure|string|array $where
         *
         * @return \Laminas\Db\ResultSet\ResultSetInterface
         */
        public function select($where = null);

        /**
         * @param array<string, mixed> $set
         *
         * @return int
         */
        public function insert($set);

        /**
         * @param array<string, mixed>                       $set
         * @param \Laminas\Db\Sql\Where|Closure|string|array $where
         *
         * @return int
         */
        public function update($set, $where = null);

        /**
         * @param \Laminas\Db\Sql\Where|Closure|string|array $where
         *
         * @return int
         */
        public function delete($where);
    }

    /**
     * @property \Laminas\Db\Adapter\AdapterInterface $adapter
     * @property int                                  $lastInsertValue
     * @property string                               $table
     */
    abstract class AbstractTableGateway implements \Laminas\Db\TableGateway\TableGatewayInterface
    {
        /** @var bool */
        protected $isInitialized = false;
        /** @var \Laminas\Db\Adapter\AdapterInterface */
        protected $adapter;
        /** @var string|array|\Laminas\Db\Sql\TableIdentifier */
        protected $table;
        /** @var array */
        protected $columns = [];
        /** @var Feature\FeatureSet */
        protected $featureSet;
        /** @var \Laminas\Db\ResultSet\ResultSetInterface */
        protected $resultSetPrototype;
        /** @var \Laminas\Db\Sql\Sql */
        protected $sql;
        /** @var int */
        protected $lastInsertValue;

        /**
         * @return bool
         */
        public function isInitialized() {}

        /**
         * Initialize
         *
         * @return null
         * @throws Exception\RuntimeException
         */
        public function initialize() {}

        /**
         * Get table name
         *
         * @return string
         */
        public function getTable() {}

        /**
         * Get adapter
         *
         * @return \Laminas\Db\Adapter\AdapterInterface
         */
        public function getAdapter() {}

        /**
         * @return array
         */
        public function getColumns() {}

        /**
         * @return Feature\FeatureSet
         */
        public function getFeatureSet() {}

        /**
         * Get select result prototype
         *
         * @return \Laminas\Db\ResultSet\ResultSetInterface
         */
        public function getResultSetPrototype() {}

        /**
         * @return \Laminas\Db\Sql\Sql
         */
        public function getSql() {}

        /**
         * Select
         *
         * @param \Laminas\Db\Sql\Where|Closure|string|array $where
         *
         * @return \Laminas\Db\ResultSet\ResultSetInterface
         */
        public function select($where = null) {}

        /**
         * @return \Laminas\Db\ResultSet\ResultSetInterface
         */
        public function selectWith(\Laminas\Db\Sql\Select $select) {}

        /**
         * @return \Laminas\Db\ResultSet\ResultSetInterface
         * @throws Exception\RuntimeException
         */
        protected function executeSelect(\Laminas\Db\Sql\Select $select) {}

        /**
         * Insert
         *
         * @param array $set
         *
         * @return int
         */
        public function insert($set) {}

        /**
         * @return int
         */
        public function insertWith(\Laminas\Db\Sql\Insert $insert) {}

        /**
         * @return int
         * @throws Exception\RuntimeException
         * @todo add $columns support
         */
        protected function executeInsert(\Laminas\Db\Sql\Insert $insert) {}

        /**
         * Update
         *
         * @param array                $set
         * @param string|array|Closure $where
         * @param null|array           $joins
         *
         * @return int
         */
        public function update($set, $where = null, ?array $joins = null) {}

        /**
         * @return int
         */
        public function updateWith(\Laminas\Db\Sql\Update $update) {}

        /**
         * @return int
         * @throws Exception\RuntimeException
         * @todo add $columns support
         */
        protected function executeUpdate(\Laminas\Db\Sql\Update $update) {}

        /**
         * Delete
         *
         * @param \Laminas\Db\Sql\Where|Closure|string|array $where
         *
         * @return int
         */
        public function delete($where) {}

        /**
         * @return int
         */
        public function deleteWith(\Laminas\Db\Sql\Delete $delete) {}

        /**
         * @return int
         * @throws Exception\RuntimeException
         * @todo add $columns support
         */
        protected function executeDelete(\Laminas\Db\Sql\Delete $delete) {}

        /**
         * Get last insert value
         *
         * @return int
         */
        public function getLastInsertValue() {}

        /**
         * __get
         *
         * @param string $property
         *
         * @return mixed
         * @throws Exception\InvalidArgumentException
         */
        public function __get($property) {}

        /**
         * @param string $property
         * @param mixed  $value
         *
         * @return mixed
         * @throws Exception\InvalidArgumentException
         */
        public function __set($property, $value) {}

        /**
         * @param string $method
         * @param array  $arguments
         *
         * @return mixed
         * @throws Exception\InvalidArgumentException
         */
        public function __call($method, $arguments) {}

        /**
         * __clone
         */
        public function __clone() {}
    }

    class TableGateway extends \Laminas\Db\TableGateway\AbstractTableGateway
    {
        /**
         * Constructor
         *
         * @param string|\Laminas\Db\Sql\TableIdentifier|array                              $table
         * @param Feature\AbstractFeature|Feature\FeatureSet|Feature\AbstractFeature[]|null $features
         *
         * @throws Exception\InvalidArgumentException
         */
        public function __construct($table, \Laminas\Db\Adapter\AdapterInterface $adapter, $features = null, ?\Laminas\Db\ResultSet\ResultSetInterface $resultSetPrototype = null, ?\Laminas\Db\Sql\Sql $sql = null) {}
    }
}

namespace Laminas\Db\TableGateway\Feature {
    abstract class AbstractFeature extends \Laminas\Db\TableGateway\AbstractTableGateway
    {
        /** @var \Laminas\Db\TableGateway\AbstractTableGateway */
        protected $tableGateway;
        /** @var array */
        protected $sharedData = [];

        /** @return string */
        public function getName() {}

        public function setTableGateway(\Laminas\Db\TableGateway\AbstractTableGateway $tableGateway) {}

        public function initialize() {}

        /** @return string[] */
        public function getMagicMethodSpecifications() {}
        /*
        public function preInitialize();
        public function postInitialize();
        public function preSelect(Select $select);
        public function postSelect(StatementInterface $statement, ResultInterface $result, ResultSetInterface $resultSet);
        public function preInsert(Insert $insert);
        public function postInsert(StatementInterface $statement, ResultInterface $result);
        public function preUpdate(Update $update);
        public function postUpdate(StatementInterface $statement, ResultInterface $result);
        public function preDelete(Delete $delete);
        public function postDelete(StatementInterface $statement, ResultInterface $result);
        */
    }

    class SequenceFeature extends \Laminas\Db\TableGateway\Feature\AbstractFeature
    {
        /** @var string */
        protected $primaryKeyField;
        /** @var string */
        protected $sequenceName;
        /** @var int */
        protected $sequenceValue;

        /**
         * @param string $primaryKeyField
         * @param string $sequenceName
         */
        public function __construct($primaryKeyField, $sequenceName) {}

        /**
         * @return \Laminas\Db\Sql\Insert
         */
        public function preInsert(\Laminas\Db\Sql\Insert $insert) {}

        public function postInsert(\Laminas\Db\Adapter\Driver\StatementInterface $statement, \Laminas\Db\Adapter\Driver\ResultInterface $result) {}

        /**
         * Generate a new value from the specified sequence in the database, and return it.
         *
         * @return int
         */
        public function nextSequenceId() {}

        /**
         * Return the most recent value from the specified sequence in the database.
         *
         * @return int
         */
        public function lastSequenceId() {}
    }

    /**
     * EventFeature event constants.
     *
     * This moves the constants introduced in {@link https://github.com/zendframework/zf2/pull/7066}
     * into a separate interface that EventFeature implements; the change keeps
     * backwards compatibility, while simultaneously removing the need to add
     * another hard dependency to the component.
     */
    interface EventFeatureEventsInterface
    {
        public const EVENT_PRE_INITIALIZE  = 'preInitialize';
        public const EVENT_POST_INITIALIZE = 'postInitialize';
        public const EVENT_PRE_SELECT      = 'preSelect';
        public const EVENT_POST_SELECT     = 'postSelect';
        public const EVENT_PRE_INSERT      = 'preInsert';
        public const EVENT_POST_INSERT     = 'postInsert';
        public const EVENT_PRE_DELETE      = 'preDelete';
        public const EVENT_POST_DELETE     = 'postDelete';
        public const EVENT_PRE_UPDATE      = 'preUpdate';
        public const EVENT_POST_UPDATE     = 'postUpdate';
    }

    class EventFeature extends \Laminas\Db\TableGateway\Feature\AbstractFeature implements \Laminas\Db\TableGateway\Feature\EventFeatureEventsInterface, \Laminas\EventManager\EventsCapableInterface
    {
        /** @var \Laminas\EventManager\EventManagerInterface */
        protected $eventManager;
        /** @var null */
        protected $event;

        public function __construct(?\Laminas\EventManager\EventManagerInterface $eventManager = null, ?\Laminas\Db\TableGateway\Feature\EventFeature\TableGatewayEvent $tableGatewayEvent = null) {}

        /**
         * Retrieve composed event manager instance
         *
         * @return \Laminas\EventManager\EventManagerInterface
         */
        public function getEventManager() {}

        /**
         * Retrieve composed event instance
         *
         * @return EventFeature\TableGatewayEvent
         */
        public function getEvent() {}

        /**
         * Initialize feature and trigger "preInitialize" event
         *
         * Ensures that the composed TableGateway has identifiers based on the
         * class name, and that the event target is set to the TableGateway
         * instance. It then triggers the "preInitialize" event.
         *
         * @return void
         */
        public function preInitialize() {}

        /**
         * Trigger the "postInitialize" event
         *
         * @return void
         */
        public function postInitialize() {}

        /**
         * Trigger the "preSelect" event
         *
         * Triggers the "preSelect" event mapping the following parameters:
         * - $select as "select"
         *
         * @return void
         */
        public function preSelect(\Laminas\Db\Sql\Select $select) {}

        /**
         * Trigger the "postSelect" event
         *
         * Triggers the "postSelect" event mapping the following parameters:
         * - $statement as "statement"
         * - $result as "result"
         * - $resultSet as "result_set"
         *
         * @return void
         */
        public function postSelect(\Laminas\Db\Adapter\Driver\StatementInterface $statement, \Laminas\Db\Adapter\Driver\ResultInterface $result, \Laminas\Db\ResultSet\ResultSetInterface $resultSet) {}

        /**
         * Trigger the "preInsert" event
         *
         * Triggers the "preInsert" event mapping the following parameters:
         * - $insert as "insert"
         *
         * @return void
         */
        public function preInsert(\Laminas\Db\Sql\Insert $insert) {}

        /**
         * Trigger the "postInsert" event
         *
         * Triggers the "postInsert" event mapping the following parameters:
         * - $statement as "statement"
         * - $result as "result"
         *
         * @return void
         */
        public function postInsert(\Laminas\Db\Adapter\Driver\StatementInterface $statement, \Laminas\Db\Adapter\Driver\ResultInterface $result) {}

        /**
         * Trigger the "preUpdate" event
         *
         * Triggers the "preUpdate" event mapping the following parameters:
         * - $update as "update"
         *
         * @return void
         */
        public function preUpdate(\Laminas\Db\Sql\Update $update) {}

        /**
         * Trigger the "postUpdate" event
         *
         * Triggers the "postUpdate" event mapping the following parameters:
         * - $statement as "statement"
         * - $result as "result"
         *
         * @return void
         */
        public function postUpdate(\Laminas\Db\Adapter\Driver\StatementInterface $statement, \Laminas\Db\Adapter\Driver\ResultInterface $result) {}

        /**
         * Trigger the "preDelete" event
         *
         * Triggers the "preDelete" event mapping the following parameters:
         * - $delete as "delete"
         *
         * @return void
         */
        public function preDelete(\Laminas\Db\Sql\Delete $delete) {}

        /**
         * Trigger the "postDelete" event
         *
         * Triggers the "postDelete" event mapping the following parameters:
         * - $statement as "statement"
         * - $result as "result"
         *
         * @return void
         */
        public function postDelete(\Laminas\Db\Adapter\Driver\StatementInterface $statement, \Laminas\Db\Adapter\Driver\ResultInterface $result) {}
    }

    class MasterSlaveFeature extends \Laminas\Db\TableGateway\Feature\AbstractFeature
    {
        /** @var \Laminas\Db\Adapter\AdapterInterface */
        protected $slaveAdapter;
        /** @var \Laminas\Db\Sql\Sql */
        protected $masterSql;
        /** @var \Laminas\Db\Sql\Sql */
        protected $slaveSql;

        /**
         * Constructor
         */
        public function __construct(\Laminas\Db\Adapter\AdapterInterface $slaveAdapter, ?\Laminas\Db\Sql\Sql $slaveSql = null) {}

        /** @return \Laminas\Db\Adapter\AdapterInterface */
        public function getSlaveAdapter() {}

        /**
         * @return \Laminas\Db\Sql\Sql
         */
        public function getSlaveSql() {}

        /**
         * after initialization, retrieve the original adapter as "master"
         */
        public function postInitialize() {}

        /**
         * preSelect()
         * Replace adapter with slave temporarily
         */
        public function preSelect() {}

        /**
         * postSelect()
         * Ensure to return to the master adapter
         */
        public function postSelect() {}
    }

    class MetadataFeature extends \Laminas\Db\TableGateway\Feature\AbstractFeature
    {
        /** @var \Laminas\Db\Metadata\MetadataInterface */
        protected $metadata;

        /**
         * Constructor
         */
        public function __construct(?\Laminas\Db\Metadata\MetadataInterface $metadata = null) {}

        public function postInitialize() {}
    }

    class GlobalAdapterFeature extends \Laminas\Db\TableGateway\Feature\AbstractFeature
    {
        /** @var \Laminas\Db\Adapter\Adapter[] */
        protected static $staticAdapters = [];

        /**
         * Set static adapter
         */
        public static function setStaticAdapter(\Laminas\Db\Adapter\Adapter $adapter) {}

        /**
         * Get static adapter
         *
         * @return \Laminas\Db\Adapter\Adapter
         * @throws \Laminas\Db\TableGateway\Exception\RuntimeException
         */
        public static function getStaticAdapter() {}

        /**
         * after initialization, retrieve the original adapter as "master"
         */
        public function preInitialize() {}
    }

    class RowGatewayFeature extends \Laminas\Db\TableGateway\Feature\AbstractFeature
    {
        /** @var array */
        protected $constructorArguments = [];

        public function __construct() {}

        public function postInitialize() {}
    }

    class FeatureSet
    {
        public const APPLY_HALT = 'halt';
        /** @var null|\Laminas\Db\TableGateway\AbstractTableGateway */
        protected $tableGateway;
        /** @var AbstractFeature[] */
        protected $features = [];
        /** @var array */
        protected $magicSpecifications = [];

        public function __construct(array $features = []) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setTableGateway(\Laminas\Db\TableGateway\AbstractTableGateway $tableGateway) {}

        /**
         * @param string $featureClassName
         *
         * @return null|AbstractFeature
         */
        public function getFeatureByClassName($featureClassName) {}

        /**
         * @param array $features
         *
         * @return $this Provides a fluent interface
         */
        public function addFeatures(array $features) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function addFeature(\Laminas\Db\TableGateway\Feature\AbstractFeature $feature) {}

        /**
         * @param string $method
         * @param array  $args
         *
         * @return void
         */
        public function apply($method, $args) {}

        /**
         * @param string $property
         *
         * @return bool
         */
        public function canCallMagicGet($property) {}

        /**
         * @param string $property
         *
         * @return mixed
         */
        public function callMagicGet($property) {}

        /**
         * @param string $property
         *
         * @return bool
         */
        public function canCallMagicSet($property) {}

        /**
         * @param string $property
         * @param mixed  $value
         *
         * @return mixed
         */
        public function callMagicSet($property, $value) {}

        /**
         * Is the method requested available in one of the added features
         *
         * @param string $method
         *
         * @return bool
         */
        public function canCallMagicCall($method) {}

        /**
         * Call method of on added feature as though it were a local method
         *
         * @param string $method
         * @param array  $arguments
         *
         * @return mixed
         */
        public function callMagicCall($method, $arguments) {}
    }
}

namespace Laminas\Db\TableGateway\Feature\EventFeature {
    class TableGatewayEvent implements \Laminas\EventManager\EventInterface
    {
        /** @var \Laminas\Db\TableGateway\AbstractTableGateway */
        protected $target;
        /** @var null */
        protected $name;
        /** @var array|\ArrayAccess */
        protected $params = [];

        /**
         * Get event name
         *
         * @return string
         */
        public function getName() {}

        /**
         * Get target/context from which event was triggered
         *
         * @return null|string|object
         */
        public function getTarget() {}

        /**
         * Get parameters passed to the event
         *
         * @return array|\ArrayAccess
         */
        public function getParams() {}

        /**
         * Get a single parameter by name
         *
         * @param string $name
         * @param mixed  $default Default value to return if parameter does not exist
         *
         * @return mixed
         */
        public function getParam($name, $default = null) {}

        /**
         * Set the event name
         *
         * @param string $name
         *
         * @return void
         */
        public function setName($name) {}

        /**
         * Set the event target/context
         *
         * @param null|string|object $target
         *
         * @return void
         */
        public function setTarget($target) {}

        /**
         * Set event parameters
         *
         * @param string $params
         *
         * @return void
         */
        public function setParams($params) {}

        /**
         * Set a single parameter by key
         *
         * @param string $name
         * @param mixed  $value
         *
         * @return void
         */
        public function setParam($name, $value) {}

        /**
         * Indicate whether or not the parent EventManagerInterface should stop propagating events
         *
         * @param bool $flag
         *
         * @return void
         */
        public function stopPropagation($flag = true) {}

        /**
         * Has this event indicated event propagation should stop?
         *
         * @return bool
         */
        public function propagationIsStopped() {}
    }
}

namespace Laminas\Db\TableGateway\Exception {
    interface ExceptionInterface extends \Laminas\Db\Exception\ExceptionInterface
    {
    }

    class RuntimeException extends \Laminas\Db\Exception\InvalidArgumentException implements \Laminas\Db\TableGateway\Exception\ExceptionInterface
    {
    }

    class InvalidArgumentException extends \Laminas\Db\Exception\InvalidArgumentException implements \Laminas\Db\TableGateway\Exception\ExceptionInterface
    {
    }
}

namespace Laminas\Db\ResultSet {
    interface ResultSetInterface extends \Traversable, \Countable
    {
        /**
         * Can be anything traversable|array
         *
         * @abstract
         *
         * @param iterable $dataSource
         *
         * @return mixed
         */
        public function initialize($dataSource);

        /**
         * Field terminology is more correct as information coming back
         * from the database might be a column, and/or the result of an
         * operation or intersection of some data
         *
         * @abstract
         * @return mixed
         */
        public function getFieldCount();
    }

    abstract class AbstractResultSet implements \Iterator, \Laminas\Db\ResultSet\ResultSetInterface
    {
        /**
         * if -1, datasource is already buffered
         * if -2, implicitly disabling buffering in ResultSet
         * if false, explicitly disabled
         * if null, default state - nothing, but can buffer until iteration started
         * if array, already buffering
         *
         * @var mixed
         */
        protected $buffer;
        /** @var null|int */
        protected $count;
        /** @var \Iterator|\IteratorAggregate|\Laminas\Db\Adapter\Driver\ResultInterface */
        protected $dataSource;
        /** @var int */
        protected $fieldCount;
        /** @var int */
        protected $position = 0;

        /**
         * Set the data source for the result set
         *
         * @param array|\Iterator|\IteratorAggregate|\Laminas\Db\Adapter\Driver\ResultInterface $dataSource
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function initialize($dataSource) {}

        /**
         * @return $this Provides a fluent interface
         * @throws Exception\RuntimeException
         */
        public function buffer() {}

        /** @return bool */
        public function isBuffered() {}

        /**
         * Get the data source used to create the result set
         *
         * @return null|\Iterator
         */
        public function getDataSource() {}

        /**
         * Retrieve count of fields in individual rows of the result set
         *
         * @return int
         */
        public function getFieldCount() {}

        /**
         * Iterator: move pointer to next item
         *
         * @return void
         */
        #[\ReturnTypeWillChange]
        public function next() {}

        /**
         * Iterator: retrieve current key
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function key() {}

        /**
         * Iterator: get current item
         *
         * @return array|null
         */
        #[\ReturnTypeWillChange]
        public function current() {}

        /**
         * Iterator: is pointer valid?
         *
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function valid() {}

        /**
         * Iterator: rewind
         *
         * @return void
         */
        #[\ReturnTypeWillChange]
        public function rewind() {}

        /**
         * Countable: return count of rows
         *
         * @return int
         */
        #[\ReturnTypeWillChange]
        public function count() {}

        /**
         * Cast result set to array of arrays
         *
         * @return array
         * @throws Exception\RuntimeException If any row is not castable to an array.
         */
        public function toArray() {}
    }

    class ResultSet extends \Laminas\Db\ResultSet\AbstractResultSet
    {
        public const TYPE_ARRAYOBJECT = 'arrayobject';
        public const TYPE_ARRAY       = 'array';
        /**
         * Allowed return types
         *
         * @var array
         */
        protected $allowedReturnTypes = [self::TYPE_ARRAYOBJECT, self::TYPE_ARRAY];
        /** @var \ArrayObject */
        protected $arrayObjectPrototype;
        /**
         * Return type to use when returning an object from the set
         *
         * @var ResultSet::TYPE_ARRAYOBJECT|ResultSet::TYPE_ARRAY
         */
        protected $returnType = self::TYPE_ARRAYOBJECT;

        /**
         * Constructor
         *
         * @param string            $returnType
         * @param null|\ArrayObject $arrayObjectPrototype
         */
        public function __construct($returnType = self::TYPE_ARRAYOBJECT, $arrayObjectPrototype = null) {}

        /**
         * Set the row object prototype
         *
         * @param \ArrayObject $arrayObjectPrototype
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function setArrayObjectPrototype($arrayObjectPrototype) {}

        /**
         * Get the row object prototype
         *
         * @return \ArrayObject
         */
        public function getArrayObjectPrototype() {}

        /**
         * Get the return type to use when returning objects from the set
         *
         * @return string
         */
        public function getReturnType() {}

        /**
         * @return array|\ArrayObject|null
         */
        public function current() {}
    }

    class HydratingResultSet extends \Laminas\Db\ResultSet\AbstractResultSet
    {
        /** @var \Laminas\Hydrator\HydratorInterface */
        protected $hydrator;
        /** @var null|object */
        protected $objectPrototype;

        /**
         * Constructor
         *
         * @param null|object $objectPrototype
         */
        public function __construct(?\Laminas\Hydrator\HydratorInterface $hydrator = null, $objectPrototype = null) {}

        /**
         * Set the row object prototype
         *
         * @param object $objectPrototype
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function setObjectPrototype($objectPrototype) {}

        /**
         * Get the row object prototype
         *
         * @return object
         */
        public function getObjectPrototype() {}

        /**
         * Set the hydrator to use for each row object
         *
         * @return $this Provides a fluent interface
         */
        public function setHydrator(\Laminas\Hydrator\HydratorInterface $hydrator) {}

        /**
         * Get the hydrator to use for each row object
         *
         * @return \Laminas\Hydrator\HydratorInterface
         */
        public function getHydrator() {}

        /**
         * Iterator: get current item
         *
         * @return object|null
         */
        public function current() {}

        /**
         * Cast result set to array of arrays
         *
         * @return array
         * @throws Exception\RuntimeException If any row is not castable to an array.
         */
        public function toArray() {}
    }
}

namespace Laminas\Db\ResultSet\Exception {
    interface ExceptionInterface extends \Laminas\Db\Exception\ExceptionInterface
    {
    }

    class RuntimeException extends \Laminas\Db\Exception\RuntimeException implements \Laminas\Db\ResultSet\Exception\ExceptionInterface
    {
    }

    class InvalidArgumentException extends \Laminas\Db\Exception\InvalidArgumentException implements \Laminas\Db\ResultSet\Exception\ExceptionInterface
    {
    }
}

namespace Laminas\Db\RowGateway\Feature {
    class FeatureSet
    {
        public const APPLY_HALT = 'halt';
        /** @var \Laminas\Db\RowGateway\AbstractRowGateway */
        protected $rowGateway;
        /** @var AbstractFeature[] */
        protected $features = [];
        /** @var array */
        protected $magicSpecifications = [];

        /**
         * @param array $features
         */
        public function __construct(array $features = []) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function setRowGateway(\Laminas\Db\RowGateway\AbstractRowGateway $rowGateway) {}

        /**
         * @param string $featureClassName
         *
         * @return AbstractFeature
         */
        public function getFeatureByClassName($featureClassName) {}

        /**
         * @param array $features
         *
         * @return $this Provides a fluent interface
         */
        public function addFeatures(array $features) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function addFeature(\Laminas\Db\RowGateway\Feature\AbstractFeature $feature) {}

        /**
         * @param string $method
         * @param array  $args
         *
         * @return void
         */
        public function apply($method, $args) {}

        /**
         * @param string $property
         *
         * @return bool
         */
        public function canCallMagicGet($property) {}

        /**
         * @param string $property
         *
         * @return mixed
         */
        public function callMagicGet($property) {}

        /**
         * @param string $property
         *
         * @return bool
         */
        public function canCallMagicSet($property) {}

        /**
         * @param string $property
         * @param mixed  $value
         *
         * @return mixed
         */
        public function callMagicSet($property, $value) {}

        /**
         * @param string $method
         *
         * @return bool
         */
        public function canCallMagicCall($method) {}

        /**
         * @param string $method
         * @param array  $arguments
         *
         * @return mixed
         */
        public function callMagicCall($method, $arguments) {}
    }

    abstract class AbstractFeature extends \Laminas\Db\RowGateway\AbstractRowGateway
    {
        /** @var \Laminas\Db\RowGateway\AbstractRowGateway */
        protected $rowGateway;
        /** @var array */
        protected $sharedData = [];

        /**
         * @return string
         */
        public function getName() {}

        public function setRowGateway(\Laminas\Db\RowGateway\AbstractRowGateway $rowGateway) {}

        /**
         * @throws \Laminas\Db\RowGateway\Exception\RuntimeException
         */
        public function initialize() {}

        /**
         * @return array
         */
        public function getMagicMethodSpecifications() {}
    }
}

namespace Laminas\Db\RowGateway {
    class RowGateway extends \Laminas\Db\RowGateway\AbstractRowGateway
    {
        /**
         * Constructor
         *
         * @param string                                                   $primaryKeyColumn
         * @param string|\Laminas\Db\Sql\TableIdentifier                   $table
         * @param \Laminas\Db\Adapter\AdapterInterface|\Laminas\Db\Sql\Sql $adapterOrSql
         *
         * @throws Exception\InvalidArgumentException
         */
        public function __construct($primaryKeyColumn, $table, $adapterOrSql = null) {}
    }

    interface RowGatewayInterface
    {
        public function save();

        public function delete();
    }

    abstract class AbstractRowGateway implements \ArrayAccess, \Countable, \Laminas\Db\RowGateway\RowGatewayInterface
    {
        /** @var bool */
        protected $isInitialized = false;
        /** @var string|\Laminas\Db\Sql\TableIdentifier */
        protected $table;
        /** @var array */
        protected $primaryKeyColumn;
        /** @var array */
        protected $primaryKeyData;
        /** @var array */
        protected $data = [];
        /** @var \Laminas\Db\Sql\Sql */
        protected $sql;
        /** @var Feature\FeatureSet */
        protected $featureSet;

        /**
         * initialize()
         */
        public function initialize() {}

        /**
         * Populate Data
         *
         * @param array $rowData
         * @param bool  $rowExistsInDatabase
         *
         * @return $this Provides a fluent interface
         */
        public function populate(array $rowData, $rowExistsInDatabase = false) {}

        /**
         * @param mixed $array
         *
         * @return AbstractRowGateway
         */
        public function exchangeArray($array) {}

        /**
         * Save
         *
         * @return int
         */
        public function save() {}

        /**
         * Delete
         *
         * @return int
         */
        public function delete() {}

        /**
         * Offset Exists
         *
         * @param string $offset
         *
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function offsetExists($offset) {}

        /**
         * Offset get
         *
         * @param string $offset
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset) {}

        /**
         * Offset set
         *
         * @param string $offset
         * @param mixed  $value
         *
         * @return $this Provides a fluent interface
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value) {}

        /**
         * Offset unset
         *
         * @param string $offset
         *
         * @return $this Provides a fluent interface
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset) {}

        /**
         * @return int
         */
        #[\ReturnTypeWillChange]
        public function count() {}

        /**
         * To array
         *
         * @return array
         */
        public function toArray() {}

        /**
         * __get
         *
         * @param string $name
         *
         * @return mixed
         * @throws Exception\InvalidArgumentException
         */
        public function __get($name) {}

        /**
         * __set
         *
         * @param string $name
         * @param mixed  $value
         *
         * @return void
         */
        public function __set($name, $value) {}

        /**
         * __isset
         *
         * @param string $name
         *
         * @return bool
         */
        public function __isset($name) {}

        /**
         * __unset
         *
         * @param string $name
         *
         * @return void
         */
        public function __unset($name) {}

        /**
         * @return bool
         */
        public function rowExistsInDatabase() {}

        /**
         * @throws Exception\RuntimeException
         */
        protected function processPrimaryKeyData() {}
    }
}

namespace Laminas\Db\RowGateway\Exception {
    interface ExceptionInterface extends \Laminas\Db\Exception\ExceptionInterface
    {
    }

    class RuntimeException extends \Laminas\Db\Exception\RuntimeException implements \Laminas\Db\RowGateway\Exception\ExceptionInterface
    {
    }

    class InvalidArgumentException extends \Laminas\Db\Exception\InvalidArgumentException implements \Laminas\Db\RowGateway\Exception\ExceptionInterface
    {
    }
}

namespace Laminas\Db\Sql {
    interface ExpressionInterface
    {
        public const TYPE_IDENTIFIER = 'identifier';
        public const TYPE_VALUE      = 'value';
        public const TYPE_LITERAL    = 'literal';
        public const TYPE_SELECT     = 'select';

        /**
         * @abstract
         * @return array of array|string should return an array in the format:
         *
         * array (
         *    // a sprintf formatted string
         *    string $specification,
         *
         *    // the values for the above sprintf formatted string
         *    array $values,
         *
         *    // an array of equal length of the $values array, with either TYPE_IDENTIFIER or TYPE_VALUE for each value
         *    array $types,
         * )
         */
        public function getExpressionData();
    }

    abstract class AbstractExpression implements \Laminas\Db\Sql\ExpressionInterface
    {
        /** @var string[] */
        protected $allowedTypes = [self::TYPE_IDENTIFIER, self::TYPE_LITERAL, self::TYPE_SELECT, self::TYPE_VALUE];

        /**
         * Normalize Argument
         *
         * @param mixed  $argument
         * @param string $defaultType
         *
         * @return array
         * @throws Exception\InvalidArgumentException
         */
        protected function normalizeArgument($argument, $defaultType = self::TYPE_VALUE) {}
    }

    class Expression extends \Laminas\Db\Sql\AbstractExpression
    {
        /**
         * @const
         */
        public const PLACEHOLDER = '?';
        /** @var string */
        protected $expression = '';
        /** @var array */
        protected $parameters = [];
        /** @var array */
        protected $types = [];

        /**
         * @param string       $expression
         * @param string|array $parameters
         * @param array        $types @deprecated will be dropped in version 3.0.0
         */
        public function __construct($expression = '', $parameters = null, array $types = []) {}

        /**
         * @param string $expression
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function setExpression($expression) {}

        /**
         * @return string
         */
        public function getExpression() {}

        /**
         * @param scalar|array $parameters
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function setParameters($parameters) {}

        /**
         * @return array
         */
        public function getParameters() {}

        /**
         * @param array $types
         *
         * @return $this Provides a fluent interface
         * @deprecated
         *
         */
        public function setTypes(array $types) {}

        /**
         * @return array
         * @deprecated
         *
         */
        public function getTypes() {}

        /**
         * @return array
         * @throws Exception\RuntimeException
         */
        public function getExpressionData() {}
    }

    interface PreparableSqlInterface
    {
        /**
         * @return void
         */
        public function prepareStatement(\Laminas\Db\Adapter\AdapterInterface $adapter, \Laminas\Db\Adapter\StatementContainerInterface $statementContainer);
    }

    interface SqlInterface
    {
        /**
         * Get SQL string for statement
         *
         * @return string
         */
        public function getSqlString(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null);
    }

    abstract class AbstractSql implements \Laminas\Db\Sql\SqlInterface
    {
        /**
         * Specifications for Sql String generation
         *
         * @var string[]|array[]
         */
        protected $specifications = [];
        /** @var string */
        protected $processInfo = ['paramPrefix' => '', 'subselectCount' => 0];
        /** @var array */
        protected $instanceParameterIndex = [];

        /**
         * {@inheritDoc}
         */
        public function getSqlString(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}

        /**
         * @return string
         */
        protected function buildSqlString(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /**
         * Render table with alias in from/join parts
         *
         * @param string $table
         * @param string $alias
         *
         * @return string
         * @todo move TableIdentifier concatenation here
         */
        protected function renderTable($table, $alias = null) {}

        /**
         * @staticvar int $runtimeExpressionPrefix
         *
         * @param null|string $namedParameterPrefix
         *
         * @return string
         * @throws Exception\RuntimeException
         */
        protected function processExpression(\Laminas\Db\Sql\ExpressionInterface $expression, \Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null, $namedParameterPrefix = null) {}

        /**
         * @param string|array $specifications
         * @param array        $parameters
         *
         * @return string
         * @throws Exception\RuntimeException
         */
        protected function createSqlFromSpecificationAndParameters($specifications, $parameters) {}

        /**
         * @return string
         */
        protected function processSubSelect(\Laminas\Db\Sql\Select $subselect, \Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /**
         * @param Join[] $joins
         *
         * @return null|string[] Null if no joins present, array of JOIN statements
         *     otherwise
         * @throws Exception\InvalidArgumentException For invalid JOIN table names.
         */
        protected function processJoin(\Laminas\Db\Sql\Join $joins, \Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /**
         * @param null|array|ExpressionInterface|Select $column
         * @param null|string                           $namedParameterPrefix
         *
         * @return string
         */
        protected function resolveColumnValue($column, \Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null, $namedParameterPrefix = null) {}

        /**
         * @param string|TableIdentifier|Select $table
         *
         * @return string
         */
        protected function resolveTable($table, \Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /**
         * Copy variables from the subject into the local properties
         */
        protected function localizeVariables() {}
    }

    abstract class AbstractPreparableSql extends \Laminas\Db\Sql\AbstractSql implements \Laminas\Db\Sql\PreparableSqlInterface
    {
        /**
         * {@inheritDoc}
         *
         * @return \Laminas\Db\Adapter\StatementContainerInterface
         */
        public function prepareStatement(\Laminas\Db\Adapter\AdapterInterface $adapter, \Laminas\Db\Adapter\StatementContainerInterface $statementContainer) {}
    }

    /**
     * @property Where  $where
     * @property Having $having
     * @property Join   $joins
     */
    class Select extends \Laminas\Db\Sql\AbstractPreparableSql
    {
        /**#@+
         * Constant
         *
         * @const
         */
        public const SELECT              = 'select';
        public const QUANTIFIER          = 'quantifier';
        public const COLUMNS             = 'columns';
        public const TABLE               = 'table';
        public const JOINS               = 'joins';
        public const WHERE               = 'where';
        public const GROUP               = 'group';
        public const HAVING              = 'having';
        public const ORDER               = 'order';
        public const LIMIT               = 'limit';
        public const OFFSET              = 'offset';
        public const QUANTIFIER_DISTINCT = 'DISTINCT';
        public const QUANTIFIER_ALL      = 'ALL';
        public const JOIN_INNER          = \Laminas\Db\Sql\Join::JOIN_INNER;
        public const JOIN_OUTER          = \Laminas\Db\Sql\Join::JOIN_OUTER;
        public const JOIN_FULL_OUTER     = \Laminas\Db\Sql\Join::JOIN_FULL_OUTER;
        public const JOIN_LEFT           = \Laminas\Db\Sql\Join::JOIN_LEFT;
        public const JOIN_RIGHT          = \Laminas\Db\Sql\Join::JOIN_RIGHT;
        public const JOIN_RIGHT_OUTER    = \Laminas\Db\Sql\Join::JOIN_RIGHT_OUTER;
        public const JOIN_LEFT_OUTER     = \Laminas\Db\Sql\Join::JOIN_LEFT_OUTER;
        public const SQL_STAR            = '*';
        public const ORDER_ASCENDING     = 'ASC';
        public const ORDER_DESCENDING    = 'DESC';
        public const COMBINE             = 'combine';
        public const COMBINE_UNION       = 'union';
        public const COMBINE_EXCEPT      = 'except';
        public const COMBINE_INTERSECT   = 'intersect';
        /**#@-*/
        /**
         * @deprecated use JOIN_LEFT_OUTER instead
         */
        public const JOIN_OUTER_LEFT = 'outer left';
        /**
         * @deprecated use JOIN_LEFT_OUTER instead
         */
        public const JOIN_OUTER_RIGHT = 'outer right';
        /** @var array Specifications */
        protected $specifications = ['statementStart' => '%1$s', self::SELECT => ['SELECT %1$s FROM %2$s'      => [[1 => '%1$s', 2 => '%1$s AS %2$s', 'combinedby' => ', '], null],
                                                                                  'SELECT %1$s %2$s FROM %3$s' => [null, [1 => '%1$s', 2 => '%1$s AS %2$s', 'combinedby' => ', '],
                                                                                      null], 'SELECT %1$s'     => [[1 => '%1$s', 2 => '%1$s AS %2$s', 'combinedby' => ', ']]],
                                     self::JOINS      => ['%1$s' => [[3 => '%1$s JOIN %2$s ON %3$s', 'combinedby' => ' ']]], self::WHERE => 'WHERE %1$s',
                                     self::GROUP      => ['GROUP BY %1$s' => [[1 => '%1$s', 'combinedby' => ', ']]], self::HAVING => 'HAVING %1$s',
                                     self::ORDER      => ['ORDER BY %1$s' => [[1 => '%1$s', 2 => '%1$s %2$s', 'combinedby' => ', ']]], self::LIMIT => 'LIMIT %1$s',
                                     self::OFFSET     => 'OFFSET %1$s', 'statementEnd' => '%1$s', self::COMBINE => '%1$s ( %2$s )'];
        /** @var bool */
        protected $tableReadOnly = false;
        /** @var bool */
        protected $prefixColumnsWithTable = true;
        /** @var string|array|TableIdentifier */
        protected $table;
        /** @var null|string|Expression */
        protected $quantifier;
        /** @var array */
        protected $columns = [self::SQL_STAR];
        /** @var null|Join */
        protected $joins;
        /** @var Where */
        protected $where;
        /** @var array */
        protected $order = [];
        /** @var null|array */
        protected $group;
        /** @var null|string|array */
        protected $having;
        /** @var int|null */
        protected $limit;
        /** @var int|null */
        protected $offset;
        /** @var array */
        protected $combine = [];

        /**
         * Constructor
         *
         * @param null|string|array|TableIdentifier $table
         */
        public function __construct($table = null) {}

        /**
         * Create from clause
         *
         * @param string|array|TableIdentifier $table
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function from($table) {}

        /**
         * @param string|Expression $quantifier DISTINCT|ALL
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function quantifier($quantifier) {}

        /**
         * Specify columns from which to select
         *
         * Possible valid states:
         *
         *   array(*)
         *
         *   array(value, ...)
         *     value can be strings or Expression objects
         *
         *   array(string => value, ...)
         *     key string will be use as alias,
         *     value can be string or Expression objects
         *
         * @param array $columns
         * @param bool  $prefixColumnsWithTable
         *
         * @return $this Provides a fluent interface
         */
        public function columns(array $columns, $prefixColumnsWithTable = true) {}

        /**
         * Create join clause
         *
         * @param string|array|TableIdentifier $name
         * @param string|Predicate\Expression  $on
         * @param string|array                 $columns
         * @param string                       $type one of the JOIN_* constants
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function join($name, $on, $columns = self::SQL_STAR, $type = self::JOIN_INNER) {}

        /**
         * Create where clause
         *
         * @param Where|Closure|string|array|Predicate\PredicateInterface $predicate
         * @param string                                                  $combination One of the OP_* constants from Predicate\PredicateSet
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function where($predicate, $combination = \Laminas\Db\Sql\Predicate\PredicateSet::OP_AND) {}

        /**
         * @param mixed $group
         *
         * @return $this Provides a fluent interface
         */
        public function group($group) {}

        /**
         * Create having clause
         *
         * @param Where|Closure|string|array $predicate
         * @param string                     $combination One of the OP_* constants from Predicate\PredicateSet
         *
         * @return $this Provides a fluent interface
         */
        public function having($predicate, $combination = \Laminas\Db\Sql\Predicate\PredicateSet::OP_AND) {}

        /**
         * @param string|array|Expression $order
         *
         * @return $this Provides a fluent interface
         */
        public function order($order) {}

        /**
         * @param int $limit
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function limit($limit) {}

        /**
         * @param int $offset
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function offset($offset) {}

        /**
         * @param string $type
         * @param string $modifier
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function combine(\Laminas\Db\Sql\Select $select, $type = self::COMBINE_UNION, $modifier = '') {}

        /**
         * @param string $part
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function reset($part) {}

        /**
         * @param string                      $index
         * @param string|array<string, array> $specification
         *
         * @return $this Provides a fluent interface
         */
        public function setSpecification($index, $specification) {}

        /**
         * @param null|string $key
         *
         * @return array<string, mixed>|mixed
         */
        public function getRawState($key = null) {}

        /**
         * Returns whether the table is read only or not.
         *
         * @return bool
         */
        public function isTableReadOnly() {}

        /** @return string[]|null */
        protected function processStatementStart(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /** @return string[]|null */
        protected function processStatementEnd(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /**
         * Process the select part
         *
         * @return null|array
         */
        protected function processSelect(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /** @return null|string[] */
        protected function processJoins(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        protected function processWhere(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        protected function processGroup(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        protected function processHaving(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        protected function processOrder(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        protected function processLimit(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        protected function processOffset(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        protected function processCombine(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /**
         * Variable overloading
         *
         * @param string $name
         *
         * @return mixed
         * @throws Exception\InvalidArgumentException
         */
        public function __get($name) {}

        /**
         * __clone
         *
         * Resets the where object each time the Select is cloned.
         *
         * @return void
         */
        public function __clone() {}

        /**
         * @param string|TableIdentifier|Select $table
         *
         * @return string
         */
        protected function resolveTable($table, \Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}
    }

    class Literal implements \Laminas\Db\Sql\ExpressionInterface
    {
        /** @var string */
        protected $literal = '';

        /**
         * @param string $literal
         */
        public function __construct($literal = '') {}

        /**
         * @param string $literal
         *
         * @return $this Provides a fluent interface
         */
        public function setLiteral($literal) {}

        /**
         * @return string
         */
        public function getLiteral() {}

        /**
         * @return array
         */
        public function getExpressionData() {}
    }

    class Sql
    {
        /** @var \Laminas\Db\Adapter\AdapterInterface */
        protected $adapter;
        /** @var string|array|TableIdentifier */
        protected $table;
        /** @var Platform\Platform */
        protected $sqlPlatform;

        /**
         * @param null|string|array|TableIdentifier $table
         * @param null|Platform\AbstractPlatform    $sqlPlatform @deprecated since version 3.0
         */
        public function __construct(\Laminas\Db\Adapter\AdapterInterface $adapter, $table = null, ?\Laminas\Db\Sql\Platform\AbstractPlatform $sqlPlatform = null) {}

        /**
         * @return null|\Laminas\Db\Adapter\AdapterInterface
         */
        public function getAdapter() {}

        /** @return bool */
        public function hasTable() {}

        /**
         * @param string|array|TableIdentifier $table
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function setTable($table) {}

        /** @return string|array|TableIdentifier */
        public function getTable() {}

        /** @return Platform\Platform */
        public function getSqlPlatform() {}

        /**
         * @param null|string|TableIdentifier $table
         *
         * @return Select
         */
        public function select($table = null) {}

        /**
         * @param null|string|TableIdentifier $table
         *
         * @return Insert
         */
        public function insert($table = null) {}

        /**
         * @param null|string|TableIdentifier $table
         *
         * @return Update
         */
        public function update($table = null) {}

        /**
         * @param null|string|TableIdentifier $table
         *
         * @return Delete
         */
        public function delete($table = null) {}

        /**
         * @return \Laminas\Db\Adapter\Driver\StatementInterface
         */
        public function prepareStatementForSqlObject(\Laminas\Db\Sql\PreparableSqlInterface $sqlObject, ?\Laminas\Db\Adapter\Driver\StatementInterface $statement = null, ?\Laminas\Db\Adapter\AdapterInterface $adapter = null) {}

        /**
         * Get sql string using platform or sql object
         *
         * @return string
         * @deprecated Deprecated in 2.4. Use buildSqlString() instead
         *
         */
        public function getSqlStringForSqlObject(\Laminas\Db\Sql\SqlInterface $sqlObject, ?\Laminas\Db\Adapter\Platform\PlatformInterface $platform = null) {}

        /**
         * @return string
         * @throws Exception\InvalidArgumentException
         */
        public function buildSqlString(\Laminas\Db\Sql\SqlInterface $sqlObject, ?\Laminas\Db\Adapter\AdapterInterface $adapter = null) {}
    }

    /**
     * Combine SQL statement - allows combining multiple select statements into one
     */
    class Combine extends \Laminas\Db\Sql\AbstractPreparableSql
    {
        public const COLUMNS           = 'columns';
        public const COMBINE           = 'combine';
        public const COMBINE_UNION     = 'union';
        public const COMBINE_EXCEPT    = 'except';
        public const COMBINE_INTERSECT = 'intersect';
        /** @var string[] */
        protected $specifications = [self::COMBINE => '%1$s (%2$s) '];

        /**
         * @param Select|array|null $select
         * @param string            $type
         * @param string            $modifier
         */
        public function __construct($select = null, $type = self::COMBINE_UNION, $modifier = '') {}

        /**
         * Create combine clause
         *
         * @param Select|array $select
         * @param string       $type
         * @param string       $modifier
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function combine($select, $type = self::COMBINE_UNION, $modifier = '') {}

        /**
         * Create union clause
         *
         * @param Select|array $select
         * @param string       $modifier
         *
         * @return $this
         */
        public function union($select, $modifier = '') {}

        /**
         * Create except clause
         *
         * @param Select|array $select
         * @param string       $modifier
         *
         * @return $this
         */
        public function except($select, $modifier = '') {}

        /**
         * Create intersect clause
         *
         * @param Select|array $select
         * @param string       $modifier
         *
         * @return $this
         */
        public function intersect($select, $modifier = '') {}

        /**
         * Build sql string
         *
         * @return string
         */
        protected function buildSqlString(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function alignColumns() {}

        /**
         * Get raw state
         *
         * @param string $key
         *
         * @return array
         */
        public function getRawState($key = null) {}
    }

    /**
     * @property Where $where
     */
    class Update extends \Laminas\Db\Sql\AbstractPreparableSql
    {
        /**@#++
         * @const
         */
        public const SPECIFICATION_UPDATE = 'update';
        public const SPECIFICATION_SET    = 'set';
        public const SPECIFICATION_WHERE  = 'where';
        public const SPECIFICATION_JOIN   = 'joins';
        public const VALUES_MERGE         = 'merge';
        public const VALUES_SET           = 'set';
        /**@#-**/
        /** @var array<string, string>|array<string, array> */
        protected $specifications = [self::SPECIFICATION_UPDATE => 'UPDATE %1$s', self::SPECIFICATION_JOIN => ['%1$s' => [[3 => '%1$s JOIN %2$s ON %3$s', 'combinedby' => ' ']]],
                                     self::SPECIFICATION_SET    => 'SET %1$s', self::SPECIFICATION_WHERE => 'WHERE %1$s'];
        /** @var string|TableIdentifier */
        protected $table = '';
        /** @var bool */
        protected $emptyWhereProtection = true;
        /** @var \Laminas\Stdlib\PriorityList */
        protected $set;
        /** @var string|Where */
        protected $where;
        /** @var null|Join */
        protected $joins;

        /**
         * Constructor
         *
         * @param null|string|TableIdentifier $table
         */
        public function __construct($table = null) {}

        /**
         * Specify table for statement
         *
         * @param string|TableIdentifier $table
         *
         * @return $this Provides a fluent interface
         */
        public function table($table) {}

        /**
         * Set key/value pairs to update
         *
         * @param array  $values Associative array of key values
         * @param string $flag   One of the VALUES_* constants
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function set(array $values, $flag = self::VALUES_SET) {}

        /**
         * Create where clause
         *
         * @param Where|Closure|string|array $predicate
         * @param string                     $combination One of the OP_* constants from Predicate\PredicateSet
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function where($predicate, $combination = \Laminas\Db\Sql\Predicate\PredicateSet::OP_AND) {}

        /**
         * Create join clause
         *
         * @param string|array $name
         * @param string       $on
         * @param string       $type one of the JOIN_* constants
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function join($name, $on, $type = \Laminas\Db\Sql\Join::JOIN_INNER) {}

        /**
         * @param null|string $key
         *
         * @return mixed|array<string, mixed>
         */
        public function getRawState($key = null) {}

        /** @return string */
        protected function processUpdate(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /** @return string */
        protected function processSet(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        protected function processWhere(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /** @return null|string[] */
        protected function processJoins(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /**
         * Variable overloading
         *
         * Proxies to "where" only
         *
         * @param string $name
         *
         * @return mixed
         */
        public function __get($name) {}

        /**
         * __clone
         *
         * Resets the where object each time the Update is cloned.
         *
         * @return void
         */
        public function __clone() {}
    }

    /**
     * @property Where $where
     */
    class Delete extends \Laminas\Db\Sql\AbstractPreparableSql
    {
        /**@#+
         * @const
         */
        public const SPECIFICATION_DELETE = 'delete';
        public const SPECIFICATION_WHERE  = 'where';
        /**@#-*/
        /**
         * {@inheritDoc}
         */
        protected $specifications = [self::SPECIFICATION_DELETE => 'DELETE FROM %1$s', self::SPECIFICATION_WHERE => 'WHERE %1$s'];
        /** @var string|TableIdentifier */
        protected $table = '';
        /** @var bool */
        protected $emptyWhereProtection = true;
        /** @var array */
        protected $set = [];
        /** @var null|string|Where */
        protected $where;

        /**
         * Constructor
         *
         * @param null|string|TableIdentifier $table
         */
        public function __construct($table = null) {}

        /**
         * Create from statement
         *
         * @param string|TableIdentifier $table
         *
         * @return $this Provides a fluent interface
         */
        public function from($table) {}

        /**
         * @param null $key
         *
         * @return mixed
         */
        public function getRawState($key = null) {}

        /**
         * Create where clause
         *
         * @param Where|Closure|string|array $predicate
         * @param string                     $combination One of the OP_* constants from Predicate\PredicateSet
         *
         * @return $this Provides a fluent interface
         */
        public function where($predicate, $combination = \Laminas\Db\Sql\Predicate\PredicateSet::OP_AND) {}

        /**
         * @return string
         */
        protected function processDelete(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /**
         * @return null|string
         */
        protected function processWhere(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /**
         * Property overloading
         *
         * Overloads "where" only.
         *
         * @param string $name
         *
         * @return Where|null
         */
        public function __get($name) {}
    }

    class Insert extends \Laminas\Db\Sql\AbstractPreparableSql
    {
        /**
         * Constants
         *
         * @const
         */
        public const SPECIFICATION_INSERT = 'insert';
        public const SPECIFICATION_SELECT = 'select';
        public const VALUES_MERGE         = 'merge';
        public const VALUES_SET           = 'set';
        /**#@-*/
        /** @var array Specification array */
        protected $specifications = [self::SPECIFICATION_INSERT => 'INSERT INTO %1$s (%2$s) VALUES (%3$s)', self::SPECIFICATION_SELECT => 'INSERT INTO %1$s %2$s %3$s'];
        /** @var string|TableIdentifier */
        protected $table;
        /** @var string[] */
        protected $columns = [];
        /** @var array|Select */
        protected $select;

        /**
         * Constructor
         *
         * @param null|string|TableIdentifier $table
         */
        public function __construct($table = null) {}

        /**
         * Create INTO clause
         *
         * @param string|TableIdentifier $table
         *
         * @return $this Provides a fluent interface
         */
        public function into($table) {}

        /**
         * Specify columns
         *
         * @param array $columns
         *
         * @return $this Provides a fluent interface
         */
        public function columns(array $columns) {}

        /**
         * Specify values to insert
         *
         * @param array|Select $values
         * @param string       $flag one of VALUES_MERGE or VALUES_SET; defaults to VALUES_SET
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException
         */
        public function values($values, $flag = self::VALUES_SET) {}

        /**
         * Create INTO SELECT clause
         *
         * @return $this
         */
        public function select(\Laminas\Db\Sql\Select $select) {}

        /**
         * Get raw state
         *
         * @param string $key
         *
         * @return mixed
         */
        public function getRawState($key = null) {}

        protected function processInsert(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        protected function processSelect(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /**
         * Overloading: variable setting
         *
         * Proxies to values, using VALUES_MERGE strategy
         *
         * @param string $name
         * @param mixed  $value
         *
         * @return $this Provides a fluent interface
         */
        public function __set($name, $value) {}

        /**
         * Overloading: variable unset
         *
         * Proxies to values and columns
         *
         * @param string $name
         *
         * @return void
         * @throws Exception\InvalidArgumentException
         */
        public function __unset($name) {}

        /**
         * Overloading: variable isset
         *
         * Proxies to columns; does a column of that name exist?
         *
         * @param string $name
         *
         * @return bool
         */
        public function __isset($name) {}

        /**
         * Overloading: variable retrieval
         *
         * Retrieves value by column name
         *
         * @param string $name
         *
         * @return mixed
         * @throws Exception\InvalidArgumentException
         */
        public function __get($name) {}
    }

    class InsertIgnore extends \Laminas\Db\Sql\Insert
    {
        /** @var array Specification array */
        protected $specifications = [self::SPECIFICATION_INSERT => 'INSERT IGNORE INTO %1$s (%2$s) VALUES (%3$s)',
                                     self::SPECIFICATION_SELECT => 'INSERT IGNORE INTO %1$s %2$s %3$s'];
    }

    class TableIdentifier
    {
        /** @var string */
        protected $table;
        /** @var null|string */
        protected $schema;

        /**
         * @param string      $table
         * @param null|string $schema
         */
        public function __construct($table, $schema = null) {}

        /**
         * @param string $table
         *
         * @deprecated please use the constructor and build a new {@see TableIdentifier} instead
         *
         */
        public function setTable($table) {}

        /**
         * @return string
         */
        public function getTable() {}

        /**
         * @return bool
         */
        public function hasSchema() {}

        /**
         * @param null|string $schema
         *
         * @return void
         * @deprecated please use the constructor and build a new {@see TableIdentifier} instead
         *
         */
        public function setSchema($schema) {}

        /**
         * @return null|string
         */
        public function getSchema() {}

        /** @return array{0: string, 1: null|string} */
        public function getTableAndSchema() {}
    }

    class Where extends \Laminas\Db\Sql\Predicate\Predicate
    {
    }

    class Having extends \Laminas\Db\Sql\Predicate\Predicate
    {
    }

    /**
     * Aggregate JOIN specifications.
     *
     * Each specification is an array with the following keys:
     *
     * - name: the JOIN name
     * - on: the table on which the JOIN occurs
     * - columns: the columns to include with the JOIN operation; defaults to
     *   `Select::SQL_STAR`.
     * - type: the type of JOIN being performed; see the `JOIN_*` constants;
     *   defaults to `JOIN_INNER`
     */
    class Join implements \Iterator, \Countable
    {
        public const JOIN_INNER       = 'inner';
        public const JOIN_OUTER       = 'outer';
        public const JOIN_FULL_OUTER  = 'full outer';
        public const JOIN_LEFT        = 'left';
        public const JOIN_RIGHT       = 'right';
        public const JOIN_RIGHT_OUTER = 'right outer';
        public const JOIN_LEFT_OUTER  = 'left outer';
        /**
         * JOIN specifications
         *
         * @var array
         */
        protected $joins = [];

        /**
         * Initialize iterator position.
         */
        public function __construct() {}

        /**
         * Rewind iterator.
         */
        #[\ReturnTypeWillChange]
        public function rewind() {}

        /**
         * Return current join specification.
         *
         * @return array
         */
        #[\ReturnTypeWillChange]
        public function current() {}

        /**
         * Return the current iterator index.
         *
         * @return int
         */
        #[\ReturnTypeWillChange]
        public function key() {}

        /**
         * Advance to the next JOIN specification.
         */
        #[\ReturnTypeWillChange]
        public function next() {}

        /**
         * Is the iterator at a valid position?
         *
         * @return bool
         */
        #[\ReturnTypeWillChange]
        public function valid() {}

        /**
         * @return array
         */
        public function getJoins() {}

        /**
         * @param string|array|TableIdentifier $name    A table name on which to join, or a single
         *                                              element associative array, of the form alias => table, or TableIdentifier instance
         * @param string|Predicate\Expression  $on      A specification describing the fields to join on.
         * @param string|string[]|int|int[]    $columns A single column name, an array
         *                                              of column names, or (a) specification(s) such as SQL_STAR representing
         *                                              the columns to join.
         * @param string                       $type    The JOIN type to use; see the JOIN_* constants.
         *
         * @return $this Provides a fluent interface
         * @throws Exception\InvalidArgumentException For invalid $name values.
         */
        public function join($name, $on, $columns = [\Laminas\Db\Sql\Select::SQL_STAR], $type = self::JOIN_INNER) {}

        /**
         * Reset to an empty list of JOIN specifications.
         *
         * @return $this Provides a fluent interface
         */
        public function reset() {}

        /**
         * Get count of attached predicates
         *
         * @return int
         */
        #[\ReturnTypeWillChange]
        public function count() {}
    }
}

namespace Laminas\Db\Sql\Predicate {
    interface PredicateInterface extends \Laminas\Db\Sql\ExpressionInterface
    {
    }

    class Expression extends \Laminas\Db\Sql\Expression implements \Laminas\Db\Sql\Predicate\PredicateInterface
    {
        /**
         * Constructor
         *
         * @param string                      $expression
         * @param int|float|bool|string|array $valueParameter
         */
        public function __construct($expression = null, $valueParameter = null) {}
    }

    class Literal extends \Laminas\Db\Sql\Literal implements \Laminas\Db\Sql\Predicate\PredicateInterface
    {
    }

    class PredicateSet implements \Laminas\Db\Sql\Predicate\PredicateInterface, \Countable
    {
        public const COMBINED_BY_AND = 'AND';
        public const OP_AND          = 'AND';
        public const COMBINED_BY_OR  = 'OR';
        public const OP_OR           = 'OR';
        /** @var string */
        protected $defaultCombination = self::COMBINED_BY_AND;
        /** @var PredicateInterface[] */
        protected $predicates = [];

        /**
         * Constructor
         *
         * @param null|array $predicates
         * @param string     $defaultCombination
         */
        public function __construct(?array $predicates = null, $defaultCombination = self::COMBINED_BY_AND) {}

        /**
         * Add predicate to set
         *
         * @param string $combination
         *
         * @return $this Provides a fluent interface
         */
        public function addPredicate(\Laminas\Db\Sql\Predicate\PredicateInterface $predicate, $combination = null) {}

        /**
         * Add predicates to set
         *
         * @param PredicateInterface|Closure|string|array $predicates
         * @param string                                  $combination
         *
         * @return $this Provides a fluent interface
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function addPredicates($predicates, $combination = self::OP_AND) {}

        /**
         * Return the predicates
         *
         * @return PredicateInterface[]
         */
        public function getPredicates() {}

        /**
         * Add predicate using OR operator
         *
         * @return $this Provides a fluent interface
         */
        public function orPredicate(\Laminas\Db\Sql\Predicate\PredicateInterface $predicate) {}

        /**
         * Add predicate using AND operator
         *
         * @return $this Provides a fluent interface
         */
        public function andPredicate(\Laminas\Db\Sql\Predicate\PredicateInterface $predicate) {}

        /**
         * Get predicate parts for where statement
         *
         * @return array
         */
        public function getExpressionData() {}

        /**
         * Get count of attached predicates
         *
         * @return int
         */
        #[\ReturnTypeWillChange]
        public function count() {}
    }

    /**
     * @property Predicate $and
     * @property Predicate $or
     * @property Predicate $AND
     * @property Predicate $OR
     * @property Predicate $NEST
     * @property Predicate $UNNEST
     */
    class Predicate extends \Laminas\Db\Sql\Predicate\PredicateSet
    {
        /** @var null|Predicate */
        protected $unnest;
        /** @var null|string */
        protected $nextPredicateCombineOperator;

        /**
         * Begin nesting predicates
         *
         * @return Predicate
         */
        public function nest() {}

        /**
         * Indicate what predicate will be unnested
         *
         * @return void
         */
        public function setUnnest(\Laminas\Db\Sql\Predicate\Predicate $predicate) {}

        /**
         * Indicate end of nested predicate
         *
         * @return Predicate
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function unnest() {}

        /**
         * Create "Equal To" predicate
         *
         * Utilizes Operator predicate
         *
         * @param int|float|bool|string|Expression $left
         * @param int|float|bool|string|Expression $right
         * @param string                           $leftType  TYPE_IDENTIFIER or TYPE_VALUE by default TYPE_IDENTIFIER {@see allowedTypes}
         * @param string                           $rightType TYPE_IDENTIFIER or TYPE_VALUE by default TYPE_VALUE {@see allowedTypes}
         *
         * @return $this Provides a fluent interface
         */
        public function equalTo($left, $right, $leftType = self::TYPE_IDENTIFIER, $rightType = self::TYPE_VALUE) {}

        /**
         * Create "Not Equal To" predicate
         *
         * Utilizes Operator predicate
         *
         * @param int|float|bool|string|Expression $left
         * @param int|float|bool|string|Expression $right
         * @param string                           $leftType  TYPE_IDENTIFIER or TYPE_VALUE by default TYPE_IDENTIFIER {@see allowedTypes}
         * @param string                           $rightType TYPE_IDENTIFIER or TYPE_VALUE by default TYPE_VALUE {@see allowedTypes}
         *
         * @return $this Provides a fluent interface
         */
        public function notEqualTo($left, $right, $leftType = self::TYPE_IDENTIFIER, $rightType = self::TYPE_VALUE) {}

        /**
         * Create "Less Than" predicate
         *
         * Utilizes Operator predicate
         *
         * @param int|float|bool|string|Expression $left
         * @param int|float|bool|string|Expression $right
         * @param string                           $leftType  TYPE_IDENTIFIER or TYPE_VALUE by default TYPE_IDENTIFIER {@see allowedTypes}
         * @param string                           $rightType TYPE_IDENTIFIER or TYPE_VALUE by default TYPE_VALUE {@see allowedTypes}
         *
         * @return $this Provides a fluent interface
         */
        public function lessThan($left, $right, $leftType = self::TYPE_IDENTIFIER, $rightType = self::TYPE_VALUE) {}

        /**
         * Create "Greater Than" predicate
         *
         * Utilizes Operator predicate
         *
         * @param int|float|bool|string|Expression $left
         * @param int|float|bool|string|Expression $right
         * @param string                           $leftType  TYPE_IDENTIFIER or TYPE_VALUE by default TYPE_IDENTIFIER {@see allowedTypes}
         * @param string                           $rightType TYPE_IDENTIFIER or TYPE_VALUE by default TYPE_VALUE {@see allowedTypes}
         *
         * @return $this Provides a fluent interface
         */
        public function greaterThan($left, $right, $leftType = self::TYPE_IDENTIFIER, $rightType = self::TYPE_VALUE) {}

        /**
         * Create "Less Than Or Equal To" predicate
         *
         * Utilizes Operator predicate
         *
         * @param int|float|bool|string|Expression $left
         * @param int|float|bool|string|Expression $right
         * @param string                           $leftType  TYPE_IDENTIFIER or TYPE_VALUE by default TYPE_IDENTIFIER {@see allowedTypes}
         * @param string                           $rightType TYPE_IDENTIFIER or TYPE_VALUE by default TYPE_VALUE {@see allowedTypes}
         *
         * @return $this Provides a fluent interface
         */
        public function lessThanOrEqualTo($left, $right, $leftType = self::TYPE_IDENTIFIER, $rightType = self::TYPE_VALUE) {}

        /**
         * Create "Greater Than Or Equal To" predicate
         *
         * Utilizes Operator predicate
         *
         * @param int|float|bool|string|Expression $left
         * @param int|float|bool|string|Expression $right
         * @param string                           $leftType  TYPE_IDENTIFIER or TYPE_VALUE by default TYPE_IDENTIFIER {@see allowedTypes}
         * @param string                           $rightType TYPE_IDENTIFIER or TYPE_VALUE by default TYPE_VALUE {@see allowedTypes}
         *
         * @return $this Provides a fluent interface
         */
        public function greaterThanOrEqualTo($left, $right, $leftType = self::TYPE_IDENTIFIER, $rightType = self::TYPE_VALUE) {}

        /**
         * Create "Like" predicate
         *
         * Utilizes Like predicate
         *
         * @param string|Expression $identifier
         * @param string            $like
         *
         * @return $this Provides a fluent interface
         */
        public function like($identifier, $like) {}

        /**
         * Create "notLike" predicate
         *
         * Utilizes In predicate
         *
         * @param string|Expression $identifier
         * @param string            $notLike
         *
         * @return $this Provides a fluent interface
         */
        public function notLike($identifier, $notLike) {}

        /**
         * Create an expression, with parameter placeholders
         *
         * @param string     $expression
         * @param null|array $parameters
         *
         * @return $this Provides a fluent interface
         */
        public function expression($expression, $parameters = null) {}

        /**
         * Create "Literal" predicate
         *
         * Literal predicate, for parameters, use expression()
         *
         * @param string $literal
         *
         * @return $this Provides a fluent interface
         */
        public function literal($literal) {}

        /**
         * Create "IS NULL" predicate
         *
         * Utilizes IsNull predicate
         *
         * @param string|Expression $identifier
         *
         * @return $this Provides a fluent interface
         */
        public function isNull($identifier) {}

        /**
         * Create "IS NOT NULL" predicate
         *
         * Utilizes IsNotNull predicate
         *
         * @param string|Expression $identifier
         *
         * @return $this Provides a fluent interface
         */
        public function isNotNull($identifier) {}

        /**
         * Create "IN" predicate
         *
         * Utilizes In predicate
         *
         * @param string|Expression            $identifier
         * @param array|\Laminas\Db\Sql\Select $valueSet
         *
         * @return $this Provides a fluent interface
         */
        public function in($identifier, $valueSet = null) {}

        /**
         * Create "NOT IN" predicate
         *
         * Utilizes NotIn predicate
         *
         * @param string|Expression            $identifier
         * @param array|\Laminas\Db\Sql\Select $valueSet
         *
         * @return $this Provides a fluent interface
         */
        public function notIn($identifier, $valueSet = null) {}

        /**
         * Create "between" predicate
         *
         * Utilizes Between predicate
         *
         * @param string|Expression $identifier
         * @param int|float|string  $minValue
         * @param int|float|string  $maxValue
         *
         * @return $this Provides a fluent interface
         */
        public function between($identifier, $minValue, $maxValue) {}

        /**
         * Create "NOT BETWEEN" predicate
         *
         * Utilizes NotBetween predicate
         *
         * @param string|Expression $identifier
         * @param int|float|string  $minValue
         * @param int|float|string  $maxValue
         *
         * @return $this Provides a fluent interface
         */
        public function notBetween($identifier, $minValue, $maxValue) {}
        /**
         * Use given predicate directly
         *
         * Contrary to {@link addPredicate()} this method respects formerly set
         * AND / OR combination operator, thus allowing generic predicates to be
         * used fluently within where chains as any other concrete predicate.
         *
         * @return $this Provides a fluent interface
         */
        // phpcs:ignore Generic.NamingConventions.ConstructorName.OldStyle
        public function predicate(\Laminas\Db\Sql\Predicate\PredicateInterface $predicate) {}

        /**
         * Overloading
         *
         * Overloads "or", "and", "nest", and "unnest"
         *
         * @param string $name
         *
         * @return $this Provides a fluent interface
         */
        public function __get($name) {}
    }

    class Between extends \Laminas\Db\Sql\AbstractExpression implements \Laminas\Db\Sql\Predicate\PredicateInterface
    {
        /** @var string */
        protected $specification = '%1$s BETWEEN %2$s AND %3$s';
        /** @var string */
        protected $identifier;
        /** @var null|int */
        protected $minValue;
        /** @var null|int */
        protected $maxValue;

        /**
         * Constructor
         *
         * @param string           $identifier
         * @param int|float|string $minValue
         * @param int|float|string $maxValue
         */
        public function __construct($identifier = null, $minValue = null, $maxValue = null) {}

        /**
         * Set identifier for comparison
         *
         * @param string $identifier
         *
         * @return $this Provides a fluent interface
         */
        public function setIdentifier($identifier) {}

        /**
         * Get identifier of comparison
         *
         * @return null|string
         */
        public function getIdentifier() {}

        /**
         * Set minimum boundary for comparison
         *
         * @param int|float|string $minValue
         *
         * @return $this Provides a fluent interface
         */
        public function setMinValue($minValue) {}

        /**
         * Get minimum boundary for comparison
         *
         * @return null|int|float|string
         */
        public function getMinValue() {}

        /**
         * Set maximum boundary for comparison
         *
         * @param int|float|string $maxValue
         *
         * @return $this Provides a fluent interface
         */
        public function setMaxValue($maxValue) {}

        /**
         * Get maximum boundary for comparison
         *
         * @return null|int|float|string
         */
        public function getMaxValue() {}

        /**
         * Set specification string to use in forming SQL predicate
         *
         * @param string $specification
         *
         * @return $this Provides a fluent interface
         */
        public function setSpecification($specification) {}

        /**
         * Get specification string to use in forming SQL predicate
         *
         * @return string
         */
        public function getSpecification() {}

        /**
         * Return "where" parts
         *
         * @return array
         */
        public function getExpressionData() {}
    }

    class Like extends \Laminas\Db\Sql\AbstractExpression implements \Laminas\Db\Sql\Predicate\PredicateInterface
    {
        /** @var string */
        protected $specification = '%1$s LIKE %2$s';
        /** @var string */
        protected $identifier = '';
        /** @var string */
        protected $like = '';

        /**
         * @param string $identifier
         * @param string $like
         */
        public function __construct($identifier = null, $like = null) {}

        /**
         * @param string $identifier
         *
         * @return $this Provides a fluent interface
         */
        public function setIdentifier($identifier) {}

        /**
         * @return string
         */
        public function getIdentifier() {}

        /**
         * @param string $like
         *
         * @return $this Provides a fluent interface
         */
        public function setLike($like) {}

        /**
         * @return string
         */
        public function getLike() {}

        /**
         * @param string $specification
         *
         * @return $this Provides a fluent interface
         */
        public function setSpecification($specification) {}

        /**
         * @return string
         */
        public function getSpecification() {}

        /**
         * @return array
         */
        public function getExpressionData() {}
    }

    class NotLike extends \Laminas\Db\Sql\Predicate\Like
    {
        /** @var string */
        protected $specification = '%1$s NOT LIKE %2$s';
    }

    class Operator extends \Laminas\Db\Sql\AbstractExpression implements \Laminas\Db\Sql\Predicate\PredicateInterface
    {
        public const OPERATOR_EQUAL_TO                 = '=';
        public const OP_EQ                             = '=';
        public const OPERATOR_NOT_EQUAL_TO             = '!=';
        public const OP_NE                             = '!=';
        public const OPERATOR_LESS_THAN                = '<';
        public const OP_LT                             = '<';
        public const OPERATOR_LESS_THAN_OR_EQUAL_TO    = '<=';
        public const OP_LTE                            = '<=';
        public const OPERATOR_GREATER_THAN             = '>';
        public const OP_GT                             = '>';
        public const OPERATOR_GREATER_THAN_OR_EQUAL_TO = '>=';
        public const OP_GTE                            = '>=';
        /**
         * {@inheritDoc}
         */
        protected $allowedTypes = [self::TYPE_IDENTIFIER, self::TYPE_VALUE];
        /** @var int|float|bool|string */
        protected $left;
        /** @var int|float|bool|string */
        protected $right;
        /** @var string */
        protected $leftType = self::TYPE_IDENTIFIER;
        /** @var string */
        protected $rightType = self::TYPE_VALUE;
        /** @var string */
        protected $operator = self::OPERATOR_EQUAL_TO;

        /**
         * Constructor
         *
         * @param int|float|bool|string $left
         * @param string                $operator
         * @param int|float|bool|string $right
         * @param string                $leftType  TYPE_IDENTIFIER or TYPE_VALUE by default TYPE_IDENTIFIER {@see allowedTypes}
         * @param string                $rightType TYPE_IDENTIFIER or TYPE_VALUE by default TYPE_VALUE {@see allowedTypes}
         */
        public function __construct($left = null, $operator = self::OPERATOR_EQUAL_TO, $right = null, $leftType = self::TYPE_IDENTIFIER, $rightType = self::TYPE_VALUE) {}

        /**
         * Set left side of operator
         *
         * @param int|float|bool|string $left
         *
         * @return $this Provides a fluent interface
         */
        public function setLeft($left) {}

        /**
         * Get left side of operator
         *
         * @return int|float|bool|string
         */
        public function getLeft() {}

        /**
         * Set parameter type for left side of operator
         *
         * @param string $type TYPE_IDENTIFIER or TYPE_VALUE {@see allowedTypes}
         *
         * @return $this Provides a fluent interface
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function setLeftType($type) {}

        /**
         * Get parameter type on left side of operator
         *
         * @return string
         */
        public function getLeftType() {}

        /**
         * Set operator string
         *
         * @param string $operator
         *
         * @return $this Provides a fluent interface
         */
        public function setOperator($operator) {}

        /**
         * Get operator string
         *
         * @return string
         */
        public function getOperator() {}

        /**
         * Set right side of operator
         *
         * @param int|float|bool|string $right
         *
         * @return $this Provides a fluent interface
         */
        public function setRight($right) {}

        /**
         * Get right side of operator
         *
         * @return int|float|bool|string
         */
        public function getRight() {}

        /**
         * Set parameter type for right side of operator
         *
         * @param string $type TYPE_IDENTIFIER or TYPE_VALUE {@see allowedTypes}
         *
         * @return $this Provides a fluent interface
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function setRightType($type) {}

        /**
         * Get parameter type on right side of operator
         *
         * @return string
         */
        public function getRightType() {}

        /**
         * Get predicate parts for where statement
         *
         * @return array
         */
        public function getExpressionData() {}
    }

    class In extends \Laminas\Db\Sql\AbstractExpression implements \Laminas\Db\Sql\Predicate\PredicateInterface
    {
        /** @var null|string|array */
        protected $identifier;
        /** @var null|array|\Laminas\Db\Sql\Select */
        protected $valueSet;
        /** @var string */
        protected $specification = '%s IN %s';
        /** @var string */
        protected $valueSpecSpecification = '%%s IN (%s)';

        /**
         * Constructor
         *
         * @param null|string|array                 $identifier
         * @param null|array|\Laminas\Db\Sql\Select $valueSet
         */
        public function __construct($identifier = null, $valueSet = null) {}

        /**
         * Set identifier for comparison
         *
         * @param string|array $identifier
         *
         * @return $this Provides a fluent interface
         */
        public function setIdentifier($identifier) {}

        /**
         * Get identifier of comparison
         *
         * @return null|string|array
         */
        public function getIdentifier() {}

        /**
         * Set set of values for IN comparison
         *
         * @param array|\Laminas\Db\Sql\Select $valueSet
         *
         * @return $this Provides a fluent interface
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        public function setValueSet($valueSet) {}

        /**
         * Gets set of values in IN comparison
         *
         * @return array|\Laminas\Db\Sql\Select
         */
        public function getValueSet() {}

        /**
         * Return array of parts for where statement
         *
         * @return array
         */
        public function getExpressionData() {}
    }

    class NotIn extends \Laminas\Db\Sql\Predicate\In
    {
        /** @var string */
        protected $specification = '%s NOT IN %s';
    }

    class IsNull extends \Laminas\Db\Sql\AbstractExpression implements \Laminas\Db\Sql\Predicate\PredicateInterface
    {
        /** @var string */
        protected $specification = '%1$s IS NULL';
        /** @var null|string */
        protected $identifier;

        /**
         * Constructor
         *
         * @param string $identifier
         */
        public function __construct($identifier = null) {}

        /**
         * Set identifier for comparison
         *
         * @param string $identifier
         *
         * @return $this Provides a fluent interface
         */
        public function setIdentifier($identifier) {}

        /**
         * Get identifier of comparison
         *
         * @return null|string
         */
        public function getIdentifier() {}

        /**
         * Set specification string to use in forming SQL predicate
         *
         * @param string $specification
         *
         * @return $this Provides a fluent interface
         */
        public function setSpecification($specification) {}

        /**
         * Get specification string to use in forming SQL predicate
         *
         * @return string
         */
        public function getSpecification() {}

        /**
         * Get parts for where statement
         *
         * @return array
         */
        public function getExpressionData() {}
    }

    class IsNotNull extends \Laminas\Db\Sql\Predicate\IsNull
    {
        /** @var string */
        protected $specification = '%1$s IS NOT NULL';
    }

    class NotBetween extends \Laminas\Db\Sql\Predicate\Between
    {
        /** @var string */
        protected $specification = '%1$s NOT BETWEEN %2$s AND %3$s';
    }
}

namespace Laminas\Db\Sql\Platform {
    interface PlatformDecoratorInterface
    {
        /**
         * @param null|object $subject
         *
         * @return $this
         */
        public function setSubject($subject);
    }

    class AbstractPlatform implements \Laminas\Db\Sql\Platform\PlatformDecoratorInterface, \Laminas\Db\Sql\PreparableSqlInterface, \Laminas\Db\Sql\SqlInterface
    {
        /** @var object|null */
        protected $subject;
        /** @var PlatformDecoratorInterface[] */
        protected $decorators = [];

        /**
         * {@inheritDoc}
         */
        public function setSubject($subject) {}

        /**
         * @param string $type
         *
         * @return void
         */
        public function setTypeDecorator($type, \Laminas\Db\Sql\Platform\PlatformDecoratorInterface $decorator) {}

        /**
         * @param \Laminas\Db\Sql\PreparableSqlInterface|\Laminas\Db\Sql\SqlInterface $subject
         *
         * @return PlatformDecoratorInterface|\Laminas\Db\Sql\PreparableSqlInterface|\Laminas\Db\Sql\SqlInterface
         */
        public function getTypeDecorator($subject) {}

        /**
         * @return array|PlatformDecoratorInterface[]
         */
        public function getDecorators() {}

        /**
         * {@inheritDoc}
         *
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function prepareStatement(\Laminas\Db\Adapter\AdapterInterface $adapter, \Laminas\Db\Adapter\StatementContainerInterface $statementContainer) {}

        /**
         * {@inheritDoc}
         *
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        public function getSqlString(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}
    }

    class Platform extends \Laminas\Db\Sql\Platform\AbstractPlatform
    {
        /** @var \Laminas\Db\Adapter\AdapterInterface */
        protected $adapter;
        /** @var \Laminas\Db\Adapter\Platform\PlatformInterface|null */
        protected $defaultPlatform;

        public function __construct(\Laminas\Db\Adapter\AdapterInterface $adapter) {}

        /**
         * @param string                                                                              $type
         * @param \Laminas\Db\Adapter\AdapterInterface|\Laminas\Db\Adapter\Platform\PlatformInterface $adapterOrPlatform
         */
        public function setTypeDecorator($type, \Laminas\Db\Sql\Platform\PlatformDecoratorInterface $decorator, $adapterOrPlatform = null) {}

        /**
         * @param \Laminas\Db\Sql\PreparableSqlInterface|\Laminas\Db\Sql\SqlInterface                      $subject
         * @param \Laminas\Db\Adapter\AdapterInterface|\Laminas\Db\Adapter\Platform\PlatformInterface|null $adapterOrPlatform
         *
         * @return PlatformDecoratorInterface|\Laminas\Db\Sql\PreparableSqlInterface|\Laminas\Db\Sql\SqlInterface
         */
        public function getTypeDecorator($subject, $adapterOrPlatform = null) {}

        /**
         * @return array|PlatformDecoratorInterface[]
         */
        public function getDecorators() {}

        /**
         * {@inheritDoc}
         *
         * @throws \Laminas\Db\Sql\Exception\RuntimeException
         */
        public function prepareStatement(\Laminas\Db\Adapter\AdapterInterface $adapter, \Laminas\Db\Adapter\StatementContainerInterface $statementContainer) {}

        /**
         * {@inheritDoc}
         *
         * @throws \Laminas\Db\Sql\Exception\RuntimeException
         */
        public function getSqlString(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}

        /**
         * @param \Laminas\Db\Adapter\AdapterInterface|\Laminas\Db\Adapter\Platform\PlatformInterface $adapterOrPlatform
         *
         * @return string
         */
        protected function resolvePlatformName($adapterOrPlatform) {}

        /**
         * @param null|\Laminas\Db\Adapter\Platform\PlatformInterface|\Laminas\Db\Adapter\AdapterInterface $adapterOrPlatform
         *
         * @return \Laminas\Db\Adapter\Platform\PlatformInterface
         * @throws \Laminas\Db\Adapter\Exception\InvalidArgumentException
         */
        protected function resolvePlatform($adapterOrPlatform) {}

        /**
         * @return \Laminas\Db\Adapter\Platform\PlatformInterface
         * @throws \Laminas\Db\Adapter\Exception\RuntimeException
         */
        protected function getDefaultPlatform() {}
    }
}

namespace Laminas\Db\Sql\Platform\IbmDb2 {
    class IbmDb2 extends \Laminas\Db\Sql\Platform\AbstractPlatform
    {
        public function __construct(?\Laminas\Db\Sql\Platform\IbmDb2\SelectDecorator $selectDecorator = null) {}
    }

    class SelectDecorator extends \Laminas\Db\Sql\Select implements \Laminas\Db\Sql\Platform\PlatformDecoratorInterface
    {
        /** @var bool */
        protected $isSelectContainDistinct = false;
        /** @var \Laminas\Db\Sql\Select */
        protected $subject;
        /** @var bool */
        protected $supportsLimitOffset = false;

        /**
         * @return bool
         */
        public function getIsSelectContainDistinct() {}

        /**
         * @param boolean $isSelectContainDistinct
         */
        public function setIsSelectContainDistinct($isSelectContainDistinct) {}

        /**
         * @param \Laminas\Db\Sql\Select $select
         */
        public function setSubject($select) {}

        /**
         * @return bool
         */
        public function getSupportsLimitOffset() {}

        /**
         * @param bool $supportsLimitOffset
         */
        public function setSupportsLimitOffset($supportsLimitOffset) {}

        /**
         * @param string      $table
         * @param null|string $alias
         *
         * @return string
         * @see Select::renderTable
         *
         */
        protected function renderTable($table, $alias = null) {}

        protected function localizeVariables() {}

        /**
         * @param array $sqls
         * @param array $parameters
         */
        protected function processLimitOffset(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer, &$sqls, &$parameters) {}
    }
}

namespace Laminas\Db\Sql\Platform\Oracle {
    class SelectDecorator extends \Laminas\Db\Sql\Select implements \Laminas\Db\Sql\Platform\PlatformDecoratorInterface
    {
        /** @var \Laminas\Db\Sql\Select */
        protected $subject;

        /**
         * @param \Laminas\Db\Sql\Select $select
         */
        public function setSubject($select) {}

        /**
         * @param string      $table
         * @param null|string $alias
         *
         * @return string
         * @see \Laminas\Db\Sql\Select::renderTable
         *
         */
        protected function renderTable($table, $alias = null) {}

        protected function localizeVariables() {}

        /**
         * @param array $sqls
         * @param array $parameters
         *
         * @return null
         */
        protected function processLimitOffset(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null, &$sqls = [], &$parameters = []) {}
    }

    class Oracle extends \Laminas\Db\Sql\Platform\AbstractPlatform
    {
        public function __construct(?\Laminas\Db\Sql\Platform\Oracle\SelectDecorator $selectDecorator = null) {}
    }
}

namespace Laminas\Db\Sql\Platform\Sqlite {
    class SelectDecorator extends \Laminas\Db\Sql\Select implements \Laminas\Db\Sql\Platform\PlatformDecoratorInterface
    {
        /** @var \Laminas\Db\Sql\Select */
        protected $subject;

        /**
         * Set Subject
         *
         * @param \Laminas\Db\Sql\Select $select
         *
         * @return $this Provides a fluent interface
         */
        public function setSubject($select) {}

        /**
         * {@inheritDoc}
         */
        protected function localizeVariables() {}

        /**
         * {@inheritDoc}
         */
        protected function processStatementStart(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /** @return string[] */
        protected function processLimit(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        protected function processOffset(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        /**
         * {@inheritDoc}
         */
        protected function processStatementEnd(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}
    }

    class Sqlite extends \Laminas\Db\Sql\Platform\AbstractPlatform
    {
        /**
         * Constructor
         *
         * Registers the type decorator.
         */
        public function __construct() {}
    }
}

namespace Laminas\Db\Sql\Platform\SqlServer {
    class SelectDecorator extends \Laminas\Db\Sql\Select implements \Laminas\Db\Sql\Platform\PlatformDecoratorInterface
    {
        /** @var \Laminas\Db\Sql\Select */
        protected $subject;

        /**
         * @param \Laminas\Db\Sql\Select $select
         */
        public function setSubject($select) {}

        protected function localizeVariables() {}

        /**
         * @param string[]             $sqls
         * @param array<string, array> $parameters
         *
         * @return void
         */
        protected function processLimitOffset(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer, &$sqls, &$parameters) {}
    }

    class SqlServer extends \Laminas\Db\Sql\Platform\AbstractPlatform
    {
        public function __construct(?\Laminas\Db\Sql\Platform\SqlServer\SelectDecorator $selectDecorator = null) {}
    }

    class CreateTableDecorator extends \Laminas\Db\Sql\Ddl\CreateTable implements \Laminas\Db\Sql\Platform\PlatformDecoratorInterface
    {
        /** @var \Laminas\Db\Sql\Ddl\CreateTable */
        protected $subject;

        /**
         * @param \Laminas\Db\Sql\Ddl\CreateTable $subject
         *
         * @return $this Provides a fluent interface
         */
        public function setSubject($subject) {}

        /**
         * @return array
         */
        protected function processTable(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}
    }
}

namespace Laminas\Db\Sql\Ddl {
    interface SqlInterface extends \Laminas\Db\Sql\SqlInterface
    {
    }

    class CreateTable extends \Laminas\Db\Sql\AbstractSql implements \Laminas\Db\Sql\Ddl\SqlInterface
    {
        public const COLUMNS     = 'columns';
        public const CONSTRAINTS = 'constraints';
        public const TABLE       = 'table';
        /** @var Column\ColumnInterface[] */
        protected $columns = [];
        /** @var string[] */
        protected $constraints = [];
        /** @var bool */
        protected $isTemporary = false;
        /**
         * {@inheritDoc}
         */
        protected $specifications = [self::TABLE  => 'CREATE %1$sTABLE %2$s (', self::COLUMNS => ["\n    %1\$s" => [[1 => '%1$s', 'combinedby' => ",\n    "]]],
                                     'combinedBy' => ",", self::CONSTRAINTS => ["\n    %1\$s" => [[1 => '%1$s', 'combinedby' => ",\n    "]]], 'statementEnd' => '%1$s'];
        /** @var string */
        protected $table = '';

        /**
         * @param string|\Laminas\Db\Sql\TableIdentifier $table
         * @param bool                                   $isTemporary
         */
        public function __construct($table = '', $isTemporary = false) {}

        /**
         * @param bool $temporary
         *
         * @return $this Provides a fluent interface
         */
        public function setTemporary($temporary) {}

        /**
         * @return bool
         */
        public function isTemporary() {}

        /**
         * @param string $name
         *
         * @return $this Provides a fluent interface
         */
        public function setTable($name) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function addColumn(\Laminas\Db\Sql\Ddl\Column\ColumnInterface $column) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function addConstraint(\Laminas\Db\Sql\Ddl\Constraint\ConstraintInterface $constraint) {}

        /**
         * @param string|null $key
         *
         * @return array
         */
        public function getRawState($key = null) {}

        /**
         * @return string[]
         */
        protected function processTable(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}

        /**
         * @return string[][]|null
         */
        protected function processColumns(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}

        /**
         * @return array|string
         */
        protected function processCombinedby(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}

        /**
         * @return string[][]|null
         */
        protected function processConstraints(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}

        /**
         * @return string[]
         */
        protected function processStatementEnd(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}
    }

    class AlterTable extends \Laminas\Db\Sql\AbstractSql implements \Laminas\Db\Sql\Ddl\SqlInterface
    {
        public const ADD_COLUMNS      = 'addColumns';
        public const ADD_CONSTRAINTS  = 'addConstraints';
        public const CHANGE_COLUMNS   = 'changeColumns';
        public const DROP_COLUMNS     = 'dropColumns';
        public const DROP_CONSTRAINTS = 'dropConstraints';
        public const TABLE            = 'table';
        /** @var array */
        protected $addColumns = [];
        /** @var array */
        protected $addConstraints = [];
        /** @var array */
        protected $changeColumns = [];
        /** @var array */
        protected $dropColumns = [];
        /** @var array */
        protected $dropConstraints = [];
        /**
         * Specifications for Sql String generation
         *
         * @var array
         */
        protected $specifications = [self::TABLE            => "ALTER TABLE %1\$s\n", self::ADD_COLUMNS => ["%1\$s" => [[1 => "ADD COLUMN %1\$s,\n", 'combinedby' => ""]]],
                                     self::CHANGE_COLUMNS   => ["%1\$s" => [[2 => "CHANGE COLUMN %1\$s %2\$s,\n", 'combinedby' => ""]]],
                                     self::DROP_COLUMNS     => ["%1\$s" => [[1 => "DROP COLUMN %1\$s,\n", 'combinedby' => ""]]],
                                     self::ADD_CONSTRAINTS  => ["%1\$s" => [[1 => "ADD %1\$s,\n", 'combinedby' => ""]]],
                                     self::DROP_CONSTRAINTS => ["%1\$s" => [[1 => "DROP CONSTRAINT %1\$s,\n", 'combinedby' => ""]]]];
        /** @var string */
        protected $table = '';

        /**
         * @param string|\Laminas\Db\Sql\TableIdentifier $table
         */
        public function __construct($table = '') {}

        /**
         * @param string $name
         *
         * @return $this Provides a fluent interface
         */
        public function setTable($name) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function addColumn(\Laminas\Db\Sql\Ddl\Column\ColumnInterface $column) {}

        /**
         * @param string $name
         *
         * @return $this Provides a fluent interface
         */
        public function changeColumn($name, \Laminas\Db\Sql\Ddl\Column\ColumnInterface $column) {}

        /**
         * @param string $name
         *
         * @return $this Provides a fluent interface
         */
        public function dropColumn($name) {}

        /**
         * @param string $name
         *
         * @return $this Provides a fluent interface
         */
        public function dropConstraint($name) {}

        /**
         * @return $this Provides a fluent interface
         */
        public function addConstraint(\Laminas\Db\Sql\Ddl\Constraint\ConstraintInterface $constraint) {}

        /**
         * @param string|null $key
         *
         * @return array
         */
        public function getRawState($key = null) {}

        /** @return string[] */
        protected function processTable(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}

        /** @return string[] */
        protected function processAddColumns(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}

        /** @return string[] */
        protected function processChangeColumns(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}

        /** @return string[] */
        protected function processDropColumns(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}

        /** @return string[] */
        protected function processAddConstraints(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}

        /** @return string[] */
        protected function processDropConstraints(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}
    }

    class DropTable extends \Laminas\Db\Sql\AbstractSql implements \Laminas\Db\Sql\Ddl\SqlInterface
    {
        public const TABLE = 'table';
        /** @var array */
        protected $specifications = [self::TABLE => 'DROP TABLE %1$s'];
        /** @var string */
        protected $table = '';

        /**
         * @param string|\Laminas\Db\Sql\TableIdentifier $table
         */
        public function __construct($table = '') {}

        /** @return string[] */
        protected function processTable(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}
    }
}

namespace Laminas\Db\Sql\Platform\Mysql {
    class Mysql extends \Laminas\Db\Sql\Platform\AbstractPlatform
    {
        public function __construct() {}
    }

    class SelectDecorator extends \Laminas\Db\Sql\Select implements \Laminas\Db\Sql\Platform\PlatformDecoratorInterface
    {
        /** @var \Laminas\Db\Sql\Select */
        protected $subject;

        /**
         * @param \Laminas\Db\Sql\Select $select
         */
        public function setSubject($select) {}

        protected function localizeVariables() {}

        /** @return null|string[] */
        protected function processLimit(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}

        protected function processOffset(\Laminas\Db\Adapter\Platform\PlatformInterface $platform, ?\Laminas\Db\Adapter\Driver\DriverInterface $driver = null, ?\Laminas\Db\Adapter\ParameterContainer $parameterContainer = null) {}
    }
}

namespace Laminas\Db\Sql\Platform\Mysql\Ddl {
    class AlterTableDecorator extends \Laminas\Db\Sql\Ddl\AlterTable implements \Laminas\Db\Sql\Platform\PlatformDecoratorInterface
    {
        /** @var \Laminas\Db\Sql\Ddl\AlterTable */
        protected $subject;
        /** @var int[] */
        protected $columnOptionSortOrder = ['unsigned' => 0, 'zerofill' => 1, 'identity' => 2, 'serial' => 2, 'autoincrement' => 2, 'comment' => 3, 'columnformat' => 4,
                                            'format'   => 4, 'storage' => 5, 'after' => 6];

        /**
         * @param \Laminas\Db\Sql\Ddl\AlterTable $subject
         *
         * @return $this Provides a fluent interface
         */
        public function setSubject($subject) {}

        /**
         * @param string $sql
         *
         * @return array
         */
        protected function getSqlInsertOffsets($sql) {}

        /**
         * @return array
         */
        protected function processAddColumns(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}

        /**
         * @return array
         */
        protected function processChangeColumns(?\Laminas\Db\Adapter\Platform\PlatformInterface $adapterPlatform = null) {}
    }

    class CreateTableDecorator extends \Laminas\Db\Sql\Ddl\CreateTable implements \Laminas\Db\Sql\Platform\PlatformDecoratorInterface
    {
        /** @var \Laminas\Db\Sql\Ddl\CreateTable */
        protected $subject;
        /** @var int[] */
        protected $columnOptionSortOrder = ['unsigned' => 0, 'zerofill' => 1, 'identity' => 2, 'serial' => 2, 'autoincrement' => 2, 'comment' => 3, 'columnformat' => 4,
                                            'format'   => 4, 'storage' => 5];

        /**
         * @param \Laminas\Db\Sql\Ddl\CreateTable $subject
         *
         * @return $this Provides a fluent interface
         */
        public function setSubject($subject) {}

        /**
         * @param string $sql
         *
         * @return array
         */
        protected function getSqlInsertOffsets($sql) {}

        /**
         * {@inheritDoc}
         */
        protected function processColumns(?\Laminas\Db\Adapter\Platform\PlatformInterface $platform = null) {}
    }
}

namespace Laminas\Db\Sql\Exception {

    interface ExceptionInterface extends \Laminas\Db\Exception\ExceptionInterface
    {
    }

    class RuntimeException extends \Laminas\Db\Exception\RuntimeException implements \Laminas\Db\Sql\Exception\ExceptionInterface
    {
    }

    class InvalidArgumentException extends \Laminas\Db\Exception\InvalidArgumentException implements \Laminas\Db\Sql\Exception\ExceptionInterface
    {
    }
}

namespace Laminas\Db\Sql\Ddl\Constraint {
    interface ConstraintInterface extends \Laminas\Db\Sql\ExpressionInterface
    {
        public function getColumns();
    }

    abstract class AbstractConstraint implements \Laminas\Db\Sql\Ddl\Constraint\ConstraintInterface
    {
        /** @var string */
        protected $columnSpecification = ' (%s)';
        /** @var string */
        protected $namedSpecification = 'CONSTRAINT %s ';
        /** @var string */
        protected $specification = '';
        /** @var string */
        protected $name = '';
        /** @var array */
        protected $columns = [];

        /**
         * @param null|string|array $columns
         * @param null|string       $name
         */
        public function __construct($columns = null, $name = null) {}

        /**
         * @param string $name
         *
         * @return $this Provides a fluent interface
         */
        public function setName($name) {}

        /**
         * @return string
         */
        public function getName() {}

        /**
         * @param null|string|array $columns
         *
         * @return $this Provides a fluent interface
         */
        public function setColumns($columns) {}

        /**
         * @param string $column
         *
         * @return $this Provides a fluent interface
         */
        public function addColumn($column) {}

        /**
         * {@inheritDoc}
         */
        public function getColumns() {}

        /**
         * {@inheritDoc}
         */
        public function getExpressionData() {}
    }

    class ForeignKey extends \Laminas\Db\Sql\Ddl\Constraint\AbstractConstraint
    {
        /** @var string */
        protected $onDeleteRule = 'NO ACTION';
        /** @var string */
        protected $onUpdateRule = 'NO ACTION';
        /** @var string[] */
        protected $referenceColumn = [];
        /** @var string */
        protected $referenceTable = '';
        /**
         * {@inheritDoc}
         */
        protected $columnSpecification = 'FOREIGN KEY (%s) ';
        /** @var string[] */
        protected $referenceSpecification = ['REFERENCES %s ', 'ON DELETE %s ON UPDATE %s'];

        /**
         * @param null|string       $name
         * @param null|string|array $columns
         * @param string            $referenceTable
         * @param null|string|array $referenceColumn
         * @param null|string       $onDeleteRule
         * @param null|string       $onUpdateRule
         */
        public function __construct($name, $columns, $referenceTable, $referenceColumn, $onDeleteRule = null, $onUpdateRule = null) {}

        /**
         * @param string $referenceTable
         *
         * @return $this Provides a fluent interface
         */
        public function setReferenceTable($referenceTable) {}

        /**
         * @return string
         */
        public function getReferenceTable() {}

        /**
         * @param null|string|array $referenceColumn
         *
         * @return $this Provides a fluent interface
         */
        public function setReferenceColumn($referenceColumn) {}

        /**
         * @return array
         */
        public function getReferenceColumn() {}

        /**
         * @param string $onDeleteRule
         *
         * @return $this Provides a fluent interface
         */
        public function setOnDeleteRule($onDeleteRule) {}

        /**
         * @return string
         */
        public function getOnDeleteRule() {}

        /**
         * @param string $onUpdateRule
         *
         * @return $this Provides a fluent interface
         */
        public function setOnUpdateRule($onUpdateRule) {}

        /**
         * @return string
         */
        public function getOnUpdateRule() {}

        /**
         * @return array
         */
        public function getExpressionData() {}
    }

    class UniqueKey extends \Laminas\Db\Sql\Ddl\Constraint\AbstractConstraint
    {
        /** @var string */
        protected $specification = 'UNIQUE';
    }

    class Check extends \Laminas\Db\Sql\Ddl\Constraint\AbstractConstraint
    {
        /** @var string|\Laminas\Db\Sql\ExpressionInterface */
        protected $expression;
        /**
         * {@inheritDoc}
         */
        protected $specification = 'CHECK (%s)';

        /**
         * @param string|\Laminas\Db\Sql\ExpressionInterface $expression
         * @param null|string                $name
         */
        public function __construct($expression, $name) {}

        /**
         * {@inheritDoc}
         */
        public function getExpressionData() {}
    }

    class PrimaryKey extends \Laminas\Db\Sql\Ddl\Constraint\AbstractConstraint
    {
        /** @var string */
        protected $specification = 'PRIMARY KEY';
    }
}

namespace Laminas\Db\Sql\Ddl\Index {
    abstract class AbstractIndex extends \Laminas\Db\Sql\Ddl\Constraint\AbstractConstraint
    {
    }

    class Index extends \Laminas\Db\Sql\Ddl\Index\AbstractIndex
    {
        /** @var string */
        protected $specification = 'INDEX %s(...)';
        /** @var array */
        protected $lengths;

        /**
         * @param string|array|null $columns
         * @param null|string       $name
         * @param array             $lengths
         */
        public function __construct($columns, $name = null, array $lengths = []) {}

        /**
         * @return array of array|string should return an array in the format:
         *
         * array (
         *    // a sprintf formatted string
         *    string $specification,
         *
         *    // the values for the above sprintf formatted string
         *    array $values,
         *
         *    // an array of equal length of the $values array, with either TYPE_IDENTIFIER or TYPE_VALUE for each value
         *    array $types,
         * )
         */
        public function getExpressionData() {}
    }
}

namespace Laminas\Db\Sql\Ddl\Column {
    /**
     * Interface ColumnInterface describes the protocol on how Column objects interact
     */
    interface ColumnInterface extends \Laminas\Db\Sql\ExpressionInterface
    {
        /**
         * @return string
         */
        public function getName();

        /**
         * @return bool
         */
        public function isNullable();

        /**
         * @return null|string|int
         */
        public function getDefault();

        /**
         * @return array
         */
        public function getOptions();
    }

    class Column implements \Laminas\Db\Sql\Ddl\Column\ColumnInterface
    {
        /** @var null|string|int */
        protected $default;
        /** @var bool */
        protected $isNullable = false;
        /** @var string */
        protected $name = '';
        /** @var array */
        protected $options = [];
        /** @var \Laminas\Db\Sql\Ddl\Constraint\ConstraintInterface[] */
        protected $constraints = [];
        /** @var string */
        protected $specification = '%s %s';
        /** @var string */
        protected $type = 'INTEGER';

        /**
         * @param null|string $name
         * @param bool        $nullable
         * @param mixed|null  $default
         * @param mixed[]     $options
         */
        public function __construct($name = null, $nullable = false, $default = null, array $options = []) {}

        /**
         * @param string $name
         *
         * @return $this Provides a fluent interface
         */
        public function setName($name) {}

        /**
         * @return null|string
         */
        public function getName() {}

        /**
         * @param bool $nullable
         *
         * @return $this Provides a fluent interface
         */
        public function setNullable($nullable) {}

        /**
         * @return bool
         */
        public function isNullable() {}

        /**
         * @param null|string|int $default
         *
         * @return $this Provides a fluent interface
         */
        public function setDefault($default) {}

        /**
         * @return null|string|int
         */
        public function getDefault() {}

        /**
         * @param array $options
         *
         * @return $this Provides a fluent interface
         */
        public function setOptions(array $options) {}

        /**
         * @param string $name
         * @param string $value
         *
         * @return $this Provides a fluent interface
         */
        public function setOption($name, $value) {}

        /**
         * @return array
         */
        public function getOptions() {}

        /**
         * @return $this Provides a fluent interface
         */
        public function addConstraint(\Laminas\Db\Sql\Ddl\Constraint\ConstraintInterface $constraint) {}

        /**
         * @return array
         */
        public function getExpressionData() {}
    }

    class Boolean extends \Laminas\Db\Sql\Ddl\Column\Column
    {
        /** @var string */
        protected $type = 'BOOLEAN';
        /**
         * {@inheritDoc}
         */
        protected $isNullable = false;

        /**
         * {@inheritDoc}
         */
        public function setNullable($nullable) {}
    }

    abstract class AbstractLengthColumn extends \Laminas\Db\Sql\Ddl\Column\Column
    {
        /** @var int */
        protected $length;

        /**
         * {@inheritDoc}
         *
         * @param int $length
         */
        public function __construct($name, $length = null, $nullable = false, $default = null, array $options = []) {}

        /**
         * @param int $length
         *
         * @return $this Provides a fluent interface
         */
        public function setLength($length) {}

        /**
         * @return int
         */
        public function getLength() {}

        /**
         * @return string
         */
        protected function getLengthExpression() {}

        /**
         * @return array
         */
        public function getExpressionData() {}
    }

    abstract class AbstractPrecisionColumn extends \Laminas\Db\Sql\Ddl\Column\AbstractLengthColumn
    {
        /** @var int|null */
        protected $decimal;

        /**
         * {@inheritDoc}
         *
         * @param int|null $decimal
         * @param int      $digits
         */
        public function __construct($name, $digits = null, $decimal = null, $nullable = false, $default = null, array $options = []) {}

        /**
         * @param int $digits
         *
         * @return $this
         */
        public function setDigits($digits) {}

        /**
         * @return int
         */
        public function getDigits() {}

        /**
         * @param int|null $decimal
         *
         * @return $this Provides a fluent interface
         */
        public function setDecimal($decimal) {}

        /**
         * @return int|null
         */
        public function getDecimal() {}

        /**
         * {@inheritDoc}
         */
        protected function getLengthExpression() {}
    }

    class Text extends \Laminas\Db\Sql\Ddl\Column\AbstractLengthColumn
    {
        /** @var string */
        protected $type = 'TEXT';
    }

    class Date extends \Laminas\Db\Sql\Ddl\Column\Column
    {
        /** @var string */
        protected $type = 'DATE';
    }

    class Integer extends \Laminas\Db\Sql\Ddl\Column\Column
    {
        /**
         * @return array
         */
        public function getExpressionData() {}
    }

    class Varchar extends \Laminas\Db\Sql\Ddl\Column\AbstractLengthColumn
    {
        /** @var string */
        protected $type = 'VARCHAR';
    }

    /**
     * @see doc section http://dev.mysql.com/doc/refman/5.6/en/timestamp-initialization.html
     */
    abstract class AbstractTimestampColumn extends \Laminas\Db\Sql\Ddl\Column\Column
    {
        /**
         * @return array
         */
        public function getExpressionData() {}
    }

    class Decimal extends \Laminas\Db\Sql\Ddl\Column\AbstractPrecisionColumn
    {
        /** @var string */
        protected $type = 'DECIMAL';
    }

    /**
     * Column representing a FLOAT type.
     *
     * Cannot name a class "float" starting in PHP 7, as it's a reserved keyword;
     * hence, "floating", with a type of "FLOAT".
     */
    class Floating extends \Laminas\Db\Sql\Ddl\Column\AbstractPrecisionColumn
    {
        /** @var string */
        protected $type = 'FLOAT';
    }

    class BigInteger extends \Laminas\Db\Sql\Ddl\Column\Integer
    {
        /** @var string */
        protected $type = 'BIGINT';
    }

    class Binary extends \Laminas\Db\Sql\Ddl\Column\AbstractLengthColumn
    {
        /** @var string */
        protected $type = 'BINARY';
    }

    class Time extends \Laminas\Db\Sql\Ddl\Column\Column
    {
        /** @var string */
        protected $type = 'TIME';
    }

    class Blob extends \Laminas\Db\Sql\Ddl\Column\AbstractLengthColumn
    {
        /** @var string Change type to blob */
        protected $type = 'BLOB';
    }

    class Datetime extends \Laminas\Db\Sql\Ddl\Column\Column
    {
        /** @var string */
        protected $type = 'DATETIME';
    }

    class Timestamp extends \Laminas\Db\Sql\Ddl\Column\AbstractTimestampColumn
    {
        /** @var string */
        protected $type = 'TIMESTAMP';
    }

    class Varbinary extends \Laminas\Db\Sql\Ddl\Column\AbstractLengthColumn
    {
        /** @var string */
        protected $type = 'VARBINARY';
    }

    class Char extends \Laminas\Db\Sql\Ddl\Column\AbstractLengthColumn
    {
        /** @var string */
        protected $type = 'CHAR';
    }
}
